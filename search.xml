<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>vue-router</title>
      <link href="/2023/08/15/vue-router/"/>
      <url>/2023/08/15/vue-router/</url>
      
        <content type="html"><![CDATA[<p>vue-router</p><p>vue的一个插件库(想到了vuex),专门用来实现SPA</p><p>关于SPA</p><p><img src="https://cdn.jsdelivr.net/gh/Ggboy001/images/img/202308151204103.png" alt="image-20230801153443299"></p><p>router(路由器,管理多个路由)</p><p>route(路由,一组key-value,就是路径-组件)</p><h4 id="vue-router使用"><a href="#vue-router使用" class="headerlink" title="vue-router使用"></a>vue-router使用</h4><ol><li>安装</li><li>vue使用</li><li>创建router文件夹</li><li>实例化路由器并传入路由配置并暴露</li><li>引入到main中并传入router</li></ol><p>使用router-link实现路由切换</p><p>使用router-view指定展示位置</p><p>注意点：</p><p>路由组件放在pages，一般组件放在components</p><p><img src="https://cdn.jsdelivr.net/gh/Ggboy001/images/img/202308151204105.png" alt="image-20230802161746406"></p><h4 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h4><p>注意就是children配置里面的path不需要加&#x2F;，然后routerlink中需要to父级＋子级路径才能匹配到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link class=&quot;list-group-item active&quot; to=&quot;/home/mes&quot;&gt;Message&lt;/router-link&gt;</span><br></pre></td></tr></table></figure><h4 id="路由传参"><a href="#路由传参" class="headerlink" title="路由传参"></a>路由传参</h4><ol><li>query传参(路径上就是有?)</li></ol><p>携带query参数,to的两种写法:</p><ul><li>字符串</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link :to=<span class="string">&quot;`/home/message?id=$&#123;m.id&#125;&amp;title=$&#123;m.title&#125;`&quot;</span>&gt;&lt;/router-link &gt;</span><br></pre></td></tr></table></figure><ul><li>对象</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link :to=<span class="string">&quot;&#123;</span></span><br><span class="line"><span class="string">path:&#x27;/home/message/detail&#x27;</span></span><br><span class="line"><span class="string">query:&#123;</span></span><br><span class="line"><span class="string">id:m.id,</span></span><br><span class="line"><span class="string">title:m.title</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;&quot;</span>&gt;&lt;/router-link &gt;</span><br></pre></td></tr></table></figure><h4 id="命名路由"><a href="#命名路由" class="headerlink" title="命名路由"></a>命名路由</h4><p>就是路由注册的时候加一个name属性，在路径比较长的时候可以直接呼唤名字</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link :to=<span class="string">&quot;&#123;</span></span><br><span class="line"><span class="string">path:&#x27;/home/message/detail&#x27;----替换成</span></span><br><span class="line"><span class="string">name:&#x27;xiangqing&#x27;</span></span><br><span class="line"><span class="string">query:&#123;</span></span><br><span class="line"><span class="string">id:m.id,</span></span><br><span class="line"><span class="string">title:m.title</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;&quot;</span>&gt;&lt;/router-link &gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>params(路径&#x2F;)传参</li></ol><p>配置路由的path路径时:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/home/message/:id/:title&#x27;</span>(需要有占位符)</span><br></pre></td></tr></table></figure><p>注意:在对象方式传参时必须使用name去寻找路由而不是path</p><p>了解:</p><p>- 获取数据:使用 query 参数<br>- 编辑数据:使用 params 参数</p><h4 id="路由的props配置"><a href="#路由的props配置" class="headerlink" title="路由的props配置"></a>路由的props配置</h4><p>第一种写法:  true时,会把params传给该组件的所有参数以props形式传给该组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">props</span>:<span class="literal">true</span></span><br></pre></td></tr></table></figure><p>第二种写法: </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">props</span>(<span class="params">$route</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">id</span>:$route.<span class="property">query</span>.<span class="property">id</span>,</span><br><span class="line">     <span class="attr">title</span>:$route.<span class="property">params</span>.<span class="property">title</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">解构赋值更推荐这种</span><br><span class="line"><span class="title function_">props</span>(<span class="params">&#123;query:&#123;id,title&#125;&#125;</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">       id,title</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>props是用来将组件接收到的参数以props的形式给该组件(需要在组件中用props接收)</p><h4 id="router-link的replace属性"><a href="#router-link的replace属性" class="headerlink" title="router-link的replace属性"></a>router-link的replace属性</h4><p>添加这个属性后,跳转链接时把历史浏览记录的栈顶给修改成当前跳转链接</p><p>- 登录&#x2F;退出登录后跳转首页</p><h4 id="编程式路由导航"><a href="#编程式路由导航" class="headerlink" title="编程式路由导航"></a>编程式路由导航</h4><p>需求:不能用router-link了,需要点击按钮后或者页面加载完成跳转(和事件有关)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">tojioalian</span>(<span class="params">id</span>) &#123;</span><br><span class="line"> <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">                <span class="attr">path</span>: <span class="string">&#x27;/jiaolian&#x27;</span>,</span><br><span class="line">                <span class="attr">query</span>: &#123;</span><br><span class="line">                    <span class="attr">id</span>: id</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;,</span><br></pre></td></tr></table></figure><p>$router上除了push,还有replace,back,forward,go</p><h4 id=""><a href="#" class="headerlink" title=""></a><keep-alive include="组件名字"></h4><p>用于缓存不展示的路由组件,让其不被销毁</p><ul><li>缓存表单填写过的信息</li><li>缓存之前看到的位置</li></ul><p>注意这个 <code>&lt;keep-alive&gt;</code> 要求被切换到的组件都有自己的名字</p><h4 id="路由组件特有的生命周期钩子"><a href="#路由组件特有的生命周期钩子" class="headerlink" title="路由组件特有的生命周期钩子"></a>路由组件特有的生命周期钩子</h4><p>—actived（激活），deactived（失活）</p><h4 id="路由守卫"><a href="#路由守卫" class="headerlink" title="路由守卫"></a>路由守卫</h4><p>1.全局守卫</p><p>全局前置路由守卫</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to:obj,<span class="keyword">from</span>:obj,next:f</span>)=&gt;</span>&#123;</span><br><span class="line">执行路由判断逻辑根据to中的属性(name或path)  or</span><br><span class="line">用meta.<span class="property">isAuth</span>来判断(需要提前在route中配置meta对象)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>(初始化的时候、在每一次路由切换之前被调用)</p><ul><li>前置守卫主要负责对路由进行访问控制,包括鉴权(鉴定用户的可以使用的权限)、权限、频率限制等场景。</li></ul><p>​    全局后置路由守卫</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">router.<span class="title function_">afterEach</span>(<span class="function">(<span class="params">to,<span class="keyword">from</span></span>)=&gt;</span>&#123;&#125;)</span><br></pre></td></tr></table></figure><ul><li>后置路由守卫主要适合处理页面加载后需要执行的一些逻辑,如埋点、标题、鉴权、数据加载等。</li></ul><p>2.独享路由守卫</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">beforeEnter</span>(<span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>)=&gt;</span>&#123;&#125;)</span><br></pre></td></tr></table></figure><p>3.组件路由守卫</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">beforeRouteEnter</span>(<span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>)=&gt;</span>&#123;&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">beforeRouteLeave</span>(<span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>)=&gt;</span>&#123;&#125;)</span><br></pre></td></tr></table></figure><p>小认知:</p><p>脚手架打包出来的项目必须要部署才能运行</p><p>路由器的有个配置是mode(hash和history),区别就是在url上更改会不会发送网络请求去请求资源</p><p>组件库仅仅就是在用到的时候翻看文档就可以,千万别耗费时间.</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vuex基础知识</title>
      <link href="/2023/08/15/vuex%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/"/>
      <url>/2023/08/15/vuex%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="vuex"><a href="#vuex" class="headerlink" title="vuex"></a>vuex</h2><p>概念：专门在vue中实现集中式状态管理的一个vue插件，对多个组件的共享状态进行集中式管理的。</p><p>一个状态需要被共享就可以用vuex</p><p><img src="https://cdn.jsdelivr.net/gh/Ggboy001/images/img/202308151154256.png" alt="image-20230731105920141"></p><p>看这张图（一定要细致，细致之后的学习会很舒服）</p><ol><li>首先，在组件里面调用dispatch接口，传参（进行的操作，和什么数值操作）</li><li>vuex的actions里面有一个键值对，是有关这个操作的函数（函数里面需要手动调用commit接口）</li><li>在mutations里面有个键值对是用来根据要做的操作修改state中的值</li><li>最终渲染到页面</li></ol><p>actions真正的作用是如果要进行的操作需要向服务器端获取数值，就可以在这个actions中发送ajax请求获取这个数值</p><p>若知道操作和数值，可以直接在组件调用commit接口去直接到达mutations</p><p>图中没有展现的是actions，mutations，state都是需要store进行管理的，也就是调用接口需要store.dispatch</p><h4 id="vuex的初始配置"><a href="#vuex的初始配置" class="headerlink" title="vuex的初始配置"></a>vuex的初始配置</h4><ol><li>安装插件</li><li>Vue.use（只有使用了，vue传入store配置vue才认）</li><li>创建store（需要传入配置项）</li><li>vm传入store配置项</li></ol><h4 id="vuex的使用"><a href="#vuex的使用" class="headerlink" title="vuex的使用"></a>vuex的使用</h4><ul><li>把共享数据放入state中</li><li>插值语法可直接访问到$store，可以拿到state中的值</li><li>dispatch中第一个参数是进行的操作，写在组件的函数中</li><li>commit中第一个参数是大写的操作，显得牛逼，写在actions中的操作函数中</li><li>小写的操作函数中第一个参数是context，大写的操作函数第一个参数是state</li></ul><p>再度完善，写的更规范些：</p><ul><li>有业务逻辑，把业务逻辑放在actions中</li><li>无业务逻辑，且已知数值，直接在组件的方法中调用commit接口</li></ul><p>另外记一个store中的配置项，getters，和计算属性类似，也是靠return拿到值，（函数参数是state）</p><h4 id="Vuex精简代码"><a href="#Vuex精简代码" class="headerlink" title="Vuex精简代码"></a>Vuex精简代码</h4><ol><li>借助vuex中的mapState，mapGetters去映射state，getters，</li></ol><ul><li><p>传入对象（改名用这个，注意值为字符串）</p></li><li><p>传入数组（简写用这个）<img src="https://cdn.jsdelivr.net/gh/Ggboy001/images/img/202308151154258.png" alt="image-20230731220702474"></p></li></ul><ol start="2"><li>借助vuex中的mapMutations，mapActions去生成对应的方法，前者方法中会调用commit与mutations对话，后者方法中会调用dispatch与actions对话</li></ol><p>传入对象{函数名：’操作大写’}</p><p>备注：需要注意模板中绑定事件需要传入要与什么数值操作，否则就是传入event</p><h4 id="Vuex模块化-命名空间"><a href="#Vuex模块化-命名空间" class="headerlink" title="Vuex模块化+命名空间"></a>Vuex模块化+命名空间</h4><p>Q:要管理的共享数据会非常多，导致mutations等等配置特别臃肿，且不适合维护，那应该怎么办呐？</p><p>A:将这些配置按与实现什么业务相关进行分类</p><p><img src="https://cdn.jsdelivr.net/gh/Ggboy001/images/img/202308151154259.png" alt="image-20230731231001763"></p><ol><li>模块化之后怎么在组件中简写形式拿到数据呐？</li></ol><p>就需要用到namespaced配置并且在四个map…中的第一个参数指定是模块化之后的哪一个</p><p>总结：(学了将近1小时,又看视频又敲代码,就学这么点东西,就是因为创建正确的联系,如果在听的时候不那么注重细节,而把重点放在老师要讲的联系上,会不会更好)</p><ul><li>在不同的业务逻辑下将store模块化</li><li>开启namespaced并且map…中第一个参数指定是哪一个模块</li></ul><ol start="2"><li>若不采用简写形式呐?(也就是自己去从state,getters中拿值,自己调用dispatch,commit)</li></ol><p>拿state中的值时需要指定是哪一个模块</p><p>拿getters中的值时不用指定哪一个模块,用getters[countAbout&#x2F;firstname]</p><p>dispatch和commit传递第一个参数时都要用在操作名前面拼接’模块&#x2F;‘</p><p><img src="https://cdn.jsdelivr.net/gh/Ggboy001/images/img/202308151154260.png" alt="image-20230801115953040"></p><p><img src="https://cdn.jsdelivr.net/gh/Ggboy001/images/img/202308151153250.png" alt="image-20230801145617700"></p><p>vuex的规范:</p><p>src写一个store文件,里面根据业务区分出来不同的store,然后暴露出去,在index中引入并写入modules中</p><p>真的容易忘,虽然一天学完了,但是过了几天之后发现真的生疏,非常多的之前建立的联系都i想不起来了,很耗费脑子.看来还是要尽可能快的学完,然后重在做项目实践.</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>first blog记录</title>
      <link href="/2023/06/16/firstblog_createblogrecord/"/>
      <url>/2023/06/16/firstblog_createblogrecord/</url>
      
        <content type="html"><![CDATA[<h2 id="build-my-blog"><a href="#build-my-blog" class="headerlink" title="build my blog"></a>build my blog</h2><p>时间:2小时+2小时+1.5小时+4.5小时+1小时+2+3</p><h3 id="环境安装（基本都有）"><a href="#环境安装（基本都有）" class="headerlink" title="环境安装（基本都有）"></a>环境安装（基本都有）</h3><ul><li><p>node</p></li><li><p>git</p></li><li><p>typora</p></li><li><p>github账号</p><blockquote><p>创建仓库（注意命名，用户名+github.io）</p></blockquote></li><li><p>科学上网</p></li><li><p>安装Hexo(高效的静态站点生成框架,基于node.js)</p><!--hexo init出现了问题,应该是因为hexo init时文件里面不是空的.删除一下就好了--></li></ul><h3 id="连接github和本地"><a href="#连接github和本地" class="headerlink" title="连接github和本地"></a>连接github和本地</h3><ul><li>git bash中生成密钥</li><li>github上注册密钥</li><li>修改_config.yml文件(博客的配置文件,可以修改与博客相关的各种信息)（修改一下deploy部署这个page就可以实现部署到github page上，就可以实现别人访问到我的网页）</li><li>安装自动部署发布工具hexo-deployer-git</li></ul><h3 id="网址的简单美化"><a href="#网址的简单美化" class="headerlink" title="网址的简单美化"></a>网址的简单美化</h3><p>先试一下hexo的主题</p><p>但出现了一个问题：在clone主题的时候</p><p><code>Cloning into &#39;hexo-theme-matery&#39;... fatal: unable to access &#39;https://github.com/blinkfox/hexo-theme-matery.git/&#39;:iled to connect to github.com port 443: Timed out</code></p><p>方法：更改代理端口（肯定要开代理的）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.proxy http://127.0.0.1:7890</span><br></pre></td></tr></table></figure><h3 id="网页"><a href="#网页" class="headerlink" title="网页"></a>网页</h3><p>网页调整</p><ul><li><p>修改原始默认主题为hexo-theme-matery接着更改_config.yml中的相关配置</p></li><li><p>创建几个必须的页面(categories,tags,about)</p></li><li><p>配置菜单导航(基本上和配置有关的,优先考虑在_config.yml中添加)(修改配置需要注意缩进的)(配置不了,不知道什么原因)</p><blockquote><p>竟然有个默认配置可以修改提交代码到哪一个分支，main(卡这里好一会)</p></blockquote></li></ul><p>网页进一步美化</p><p>挑一挑可用的主题</p><h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><ul><li><p>域名（域名备案）</p></li><li><p>图床</p></li><li><p>服务器</p></li></ul><p> <a href="https://zblogs.top/how-to-build-a-personal-blog-site/">详细了解</a></p><p>note:又拍云cdn之后可以用于提高网站加载速度</p><h2 id="拓展了解"><a href="#拓展了解" class="headerlink" title="拓展了解"></a>拓展了解</h2><h3 id="静态博客和动态博客"><a href="#静态博客和动态博客" class="headerlink" title="静态博客和动态博客"></a>静态博客和动态博客</h3><ul><li><p>静态博客</p><blockquote><ul><li>html代码生成后,页面的内容和显示效果就基本不会变化</li><li>不会有太多用户交互(本来就是给自己写文章的,也不需要有太多交互效果)</li><li>就几个页面,要求不高,github page或低配服务器都可以</li><li>纯代码小白不推荐使用hexo+github创建,较麻烦,且耗时</li></ul></blockquote></li><li><p>动态博客</p></li></ul><blockquote><ul><li>可以随时间,数据库操作的结果的改变而变化</li><li>可以设计用户交互,着重用户体验感,这也就不是个人博客了,更偏向于用户使用的网站</li><li>服务器根据个人需求</li><li>可用wordpress等创建,简单易上手</li></ul></blockquote><p>我感觉写博客可以帮助我更好的表达自己,尤其是要站在别人的角度.自己经常性的就是仅仅让自己懂,但是别人并不理解.</p><p>输入我想输入的,输出我可以输出的.</p><p>明天: 3小时<br>更改为butterfly主题</p><p>找了一个小时10分钟，觉得还是不需要花时间去找了。嗯就这样。先用着这个基于butterfly的anzhiyu主题吧。然后再根据文档找找自己需要的功能。</p><p>美化根据文档其实就是时间问题.现在先大致这样.等之后有时间可以再更改</p><h4 id="questions："><a href="#questions：" class="headerlink" title="questions："></a>questions：</h4><ul><li><p>nav没有显示出来</p></li><li><p>文章封面设置显示不出来并且报错(要注意修改的配置在什么文件)</p></li><li><p>footer上班摸鱼去不了</p></li><li><p>线上输入域名打开排版很乱，刚开始以为是没有CDN或者github pages的问题，或者是主题配置的问题，或者是控制台报错的问题，在这卡了有两天时间，但没有浪费，（就着问题我优化了双线部署，也搭建了图床，也了解到控制台一些报错信息的原因。）。最后解决问题的方式竟然是偶尔打开一个博主的创建博客的教程，让我看到了hexo clean，尝试一下，然后就可以了。这么说，排错有时候真的很靠运气啊。</p></li></ul><blockquote><p><code>  hexo clean</code></p><p>清除缓存文件 (<code>db.json</code>) 和已生成的静态文件 (<code>public</code>)。</p><p>在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。</p></blockquote><p>之后的兴趣拓展点:(当然也要注意时间四象限)</p><ul><li>主题拓展找找自己喜欢的</li><li>图床</li><li>加速网站访问速度,cdn(Content Delivery Network,,将内容缓存在终端用户附近,加速了网站的访问——用户与内容之间的物理距离缩短，用户的等待时间也得以缩短)</li></ul><h3 id="写博客可以写的属于自己的结构"><a href="#写博客可以写的属于自己的结构" class="headerlink" title="写博客可以写的属于自己的结构"></a>写博客可以写的属于自己的结构</h3><ul><li>首先目的,知识点的用处以及为什么</li><li>其次不依附所写内容的灵感感悟</li><li>最后是拓展点</li></ul><p>Material Design</p><p>注重卡片式设计、纸张的模拟、使用了强烈对比色彩的设计风格</p><p>tips：</p><p>写代码块的语法<code>         代码</code></p><p>使用hexo s 启动本地服务后，如果修改了配置或者文章内容，需要停止服务后重新启动才能生效。这样，在调试或写文章阶段非常不方便，可以使用下面命令，以debug的方式启动，这样每次修改后就无需重启服务了。</p><blockquote><p>$ hexo s –debug（。。。不是我想要的功能，这就是博客的不严谨的地方，但应该有些用处，之后了解一下）</p></blockquote><p>重要的\觉得自己忘了有损失的知识点记录下来,其余的就忘记那也改变不了.</p><h2 id="优化blog网站"><a href="#优化blog网站" class="headerlink" title="优化blog网站"></a>优化blog网站</h2><h3 id="部署github仓库到vercel"><a href="#部署github仓库到vercel" class="headerlink" title="部署github仓库到vercel"></a>部署github仓库到vercel</h3><ul><li>首先就是github登录到vercel</li><li>然后import仓库就行</li><li>再稍微调节一下设置参数</li><li>所以我的博客现在是双线部署</li></ul><p>双线部署的优点：</p><ul><li>避免一个出现故障就访问不了</li><li>访问请求分发到不同的服务器，提高博客整体性能</li></ul><p>github pages是不支持 实时部署的，</p><p>vercel支持</p><p>问题： </p><p><code> net::ERR_BLOCKED_BY_CLIENT</code></p><p>浏览器防广告的插件的问题</p><p><img src="https://cdn.jsdelivr.net/gh/Ggboy001/images/img/image-20230619002418850.png" alt="image-20230619002418850"></p><h3 id="图床"><a href="#图床" class="headerlink" title="图床"></a>图床</h3><p>github+typora+jsdeliver实现</p><p>jsdelivr是首个打通国内与海外的免费CDN服务</p><ul><li>github创建放图片的仓库</li><li>github创建token用于picgo图床配置填写以可以向仓库写入图片</li><li>填写picgo图床配置注意按格式填写,自定义域名用到jsdelivr</li></ul><p>拓展:</p><ul><li><p>之后可以详细了解下jsdelivr还可以做什么</p></li><li><p>hexo的指令</p></li></ul>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
