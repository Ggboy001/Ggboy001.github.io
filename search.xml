<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>nodejs基础+express框架</title>
      <link href="/2023/12/08/nodejs%E5%9F%BA%E7%A1%80-express%E6%A1%86%E6%9E%B6/"/>
      <url>/2023/12/08/nodejs%E5%9F%BA%E7%A1%80-express%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="nodejs基础-express框架"><a href="#nodejs基础-express框架" class="headerlink" title="nodejs基础+express框架"></a>nodejs基础+express框架</h1><h4 id="node基础知识思维导图"><a href="#node基础知识思维导图" class="headerlink" title="node基础知识思维导图"></a>node基础知识思维导图</h4><p><img src="https://cdn.jsdelivr.net/gh/Ggboy001/images/img/202312081611494.png" alt="nodejs"></p><blockquote><p> 终端小命令</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/Ggboy001/images/img/202312081606160.png" alt="image-20231017140815509"></p><p>nodejs是不能使用DOM，BOM的api的</p><p><img src="https://cdn.jsdelivr.net/gh/Ggboy001/images/img/202312081606161.png" alt="image-20231017141658490"></p><p>浏览器中的JavaScript</p><p><img src="https://cdn.jsdelivr.net/gh/Ggboy001/images/img/202312081606162.png" alt="image-20231017141730879"></p><p>node.js中的顶级对象为global，并非是window。</p><h2 id="Buffer"><a href="#Buffer" class="headerlink" title="Buffer"></a>Buffer</h2><p>1. <strong>概念</strong></p><p>Buffer 是一个类似于数组的 对象 ，用于表示固定长度的字节序列</p><p>Buffer 本质是一段内存空间，专门用来处理 二进制数据 。</p><p>创建 Buffer</p><ol><li><p>Buffer.alloc</p></li><li><p>Buffer.allocUnsafe</p></li><li><p>Buffer.from</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//通过字符串创建 Buffer</span><br><span class="line">let buf_3 = Buffer.from(&#x27;hello&#x27;);</span><br><span class="line">//通过数组创建 Buffer</span><br><span class="line">let buf_4 = Buffer.from([ 105 , 108 , 111 , 118 , 101 , 121 , 111 , 117 ]);</span><br></pre></td></tr></table></figure><p>可以借助 toString 方法将 Buffer 转为字符串</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let buf_4 = Buffer.from([ 105 , 108 , 111 , 118 , 101 , 121 , 111 , 117 ]);</span><br><span class="line">console.log(buf_4.toString())</span><br></pre></td></tr></table></figure><h2 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h2><p>全是api，只需要知道参数就可以了呗</p><p>vscode编辑器保存你修改的内容到文件,就有可能用到fs模块</p><h3 id="文件写入"><a href="#文件写入" class="headerlink" title="文件写入"></a>文件写入</h3><p>writeFile 异步写入 语法： fs.writeFile(file, data[, options], callback) </p><p>参数说明：</p><p> file 文件名</p><p> data 待写入的数据</p><p> options 选项设置 （可选）</p><p> callback 写入回调</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const fs = require(&#x27;fs&#x27;)</span><br><span class="line">fs.writeFile(&#x27;./我无敌.txt&#x27;, &#x27;我真的可以无敌的&#x27;, (err) =&gt; &#123;</span><br><span class="line">    if (err) &#123;</span><br><span class="line">        console.log(err);</span><br><span class="line">    &#125;</span><br><span class="line">    console.log(&#x27;成功了&#x27;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>文件追加写入：</p><p>appendFile</p><p>流式写入:</p><p>createWriteStream </p><blockquote><p>程序打开一个文件是需要消耗资源的 ，流式写入可以减少打开关闭文件的次数。 流式写入方式适用于 大文件写入或者频繁写入 的场景, writeFile 适合于 写入频率较低的场景</p></blockquote><h3 id="文件写入场景"><a href="#文件写入场景" class="headerlink" title="文件写入场景"></a>文件写入场景</h3><ul><li>当 需要持久化保存数据 的时候，应该想到 文件写入</li></ul><p>下载文件 </p><p>安装软件 </p><p>保存程序日志，如 Git </p><p>编辑器保存文件 </p><p>视频录制</p><h3 id="文件读取"><a href="#文件读取" class="headerlink" title="文件读取"></a>文件读取</h3><p>语法： fs.readFile(path[, options], callback) </p><p>参数说明： </p><p>path 文件路径 </p><p>options 选项配置 </p><p>callback 回调函数</p><p>回调里面有两个参数err，data</p><p>文件读取的应用场景：</p><p>电脑开机</p><p> 程序运行 </p><p>编辑器打开文件 </p><p>查看图片 </p><p>播放视频 </p><p>播放音乐</p><p> Git 查看日志 </p><p>上传文件</p><p> 查看聊天记录（qq聊天漫游记录，开了保存云端，没开保存本地，也就说明你打开聊天窗口，需要在本地读取文件）</p><h4 id="文件流式读取"><a href="#文件流式读取" class="headerlink" title="文件流式读取"></a>文件流式读取</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/创建读取流对象</span><br><span class="line">let rs = fs.createReadStream(&#x27;./观书有感.txt&#x27;);</span><br><span class="line">//每次取出 64k 数据后执行一次 data 回调</span><br><span class="line">rs.on(&#x27;data&#x27;, data =&gt; &#123;</span><br><span class="line">console.log(data);</span><br><span class="line">console.log(data.length);</span><br><span class="line">&#125;);</span><br><span class="line">//读取完毕后, 执行 end 回调</span><br><span class="line">rs.on(&#x27;end&#x27;, () =&gt; &#123;</span><br><span class="line">console.log(&#x27;读取完成&#x27;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="文件复制"><a href="#文件复制" class="headerlink" title="文件复制"></a>文件复制</h3><p>两种方式：</p><ul><li><p>读取写入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">const fs = require(&#x27;fs&#x27;)</span><br><span class="line">fs.readFile(&#x27;./我无敌.txt&#x27;, (err, data) =&gt; &#123;</span><br><span class="line">    if (err) &#123;</span><br><span class="line">        console.log(err);</span><br><span class="line">    &#125;</span><br><span class="line">    fs.writeFile(&#x27;./我无敌2.txt&#x27;, data, error =&gt; &#123;</span><br><span class="line">        if (error) &#123;</span><br><span class="line">            console.log(&#x27;出错了&#x27;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>流式读取写入（没有找到rs中的on）</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const fs = require(&#x27;fs&#x27;)</span><br><span class="line">let rs = fs.createReadStream(&#x27;./我无敌.txt&#x27;)</span><br><span class="line">console.log(rs);</span><br><span class="line">let ws = fs.createWriteStream(&#x27;./我无敌3.txt&#x27;)</span><br><span class="line">rs.on(&#x27;data&#x27;, chunk =&gt; &#123;</span><br><span class="line">    ws.write(chunk)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="文件重命名和移动"><a href="#文件重命名和移动" class="headerlink" title="文件重命名和移动"></a>文件重命名和移动</h3><p>rename</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const fs = require(&#x27;fs&#x27;)</span><br><span class="line">fs.rename(&#x27;./我无敌2.txt&#x27;, &#x27;./test/wowudi.txt&#x27;, err =&gt; &#123;</span><br><span class="line">    console.log(err);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="文件删除"><a href="#文件删除" class="headerlink" title="文件删除"></a>文件删除</h3><p>unlink</p><h2 id="文件夹-目录操作"><a href="#文件夹-目录操作" class="headerlink" title="文件夹&#x2F;目录操作"></a>文件夹&#x2F;目录操作</h2><p>其实都有同步异步的接口,这里只写了异步的接口,常用,同步就是加一个sync</p><h3 id="创建文件夹"><a href="#创建文件夹" class="headerlink" title="创建文件夹"></a>创建文件夹</h3><p>fs.mkdir(path[, options], callback)</p><p>path 文件夹路径 </p><p>options 选项配置（ 可选 ） </p><p>callback 操作后的回调</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">fs.mkdir(&#x27;./page&#x27;, err =&gt; &#123;</span><br><span class="line">if(err) throw err;</span><br><span class="line">console.log(&#x27;创建成功&#x27;);</span><br><span class="line">&#125;);</span><br><span class="line">//递归异步创建</span><br><span class="line">fs.mkdir(&#x27;./1/2/3&#x27;, &#123;recursive: true&#125;, err =&gt; &#123;</span><br><span class="line">if(err) throw err;</span><br><span class="line">console.log(&#x27;递归创建成功&#x27;);</span><br><span class="line">&#125;);</span><br><span class="line">//递归同步创建文件夹</span><br><span class="line">fs.mkdirSync(&#x27;./x/y/z&#x27;, &#123;recursive: true&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="读取文件夹"><a href="#读取文件夹" class="headerlink" title="读取文件夹"></a>读取文件夹</h3><p>fs.readdir(path[, options], callback)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//异步读取</span><br><span class="line">fs.readdir(&#x27;./论语&#x27;, (err, data) =&gt; &#123;</span><br><span class="line">if(err) throw err;</span><br><span class="line">console.log(data);</span><br><span class="line">&#125;);</span><br><span class="line">//同步读取</span><br><span class="line">let data = fs.readdirSync(&#x27;./论语&#x27;);</span><br><span class="line">console.log(data);</span><br></pre></td></tr></table></figure><h3 id="删除文件夹"><a href="#删除文件夹" class="headerlink" title="删除文件夹"></a>删除文件夹</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//异步删除文件夹</span><br><span class="line">fs.rmdir(&#x27;./page&#x27;, err =&gt; &#123;</span><br><span class="line">if(err) throw err;</span><br><span class="line">console.log(&#x27;删除成功&#x27;);</span><br><span class="line">&#125;);</span><br><span class="line">//异步递归删除文件夹</span><br><span class="line">fs.rmdir(&#x27;./1&#x27;, &#123;recursive: true&#125;, err =&gt; &#123;</span><br><span class="line">if(err) &#123;</span><br><span class="line">console.log(err);</span><br><span class="line">&#125;</span><br><span class="line">console.log(&#x27;递归删除&#x27;)</span><br><span class="line">&#125;);</span><br><span class="line">//同步递归删除文件夹</span><br><span class="line">fs.rmdirSync(&#x27;./x&#x27;, &#123;recursive: true&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="全局对象"><a href="#全局对象" class="headerlink" title="全局对象"></a>全局对象</h2><p>js中特殊的一个对象，它及其所有属性都可以在程序的任何地方访问，即全局变量。</p><p>在浏览器 JavaScript 中，通常 window 是全局对象， 而 Node.js 中的全局对象是 global，所有全局变量（除了 global 本身以外）都是 global 对象的属性。</p><h3 id="dirname"><a href="#dirname" class="headerlink" title="__dirname"></a>__dirname</h3><p>__dirname 与 require 类似，都是 Node.js 环境中的’全局’变量 __dirname 保存着 当前文件所在目录的绝对路径 ，可以使用 __dirname 与文件名拼接成绝对路径 __</p><p> 使用 fs 模块的时候，尽量使用 __dirname 将路径转化为绝对路径，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const fs = require(&#x27;fs&#x27;)</span><br><span class="line">fs.writeFile(__dirname + &#x27;/dirnametest.txt&#x27;, &#x27;testdirname&#x27;, (err) =&gt; &#123;</span><br><span class="line">    if (err) &#123;</span><br><span class="line">        console.log(&#x27;失败&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="工具模块"><a href="#工具模块" class="headerlink" title="工具模块"></a>工具模块</h2><h3 id="path模块"><a href="#path模块" class="headerlink" title="path模块"></a>path模块</h3><p>主要就是和文件路径相关的api</p><p>主要知道第一个就行了</p><p><img src="https://cdn.jsdelivr.net/gh/Ggboy001/images/img/202312081606163.png" alt="image-20231018105651456"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//就是解决路径拼接不规范的问题</span><br><span class="line">第一个参数是根目录,后面的参数就跟相对路径</span><br><span class="line">path.resolve(__dirname,&#x27;./file.txt&#x27;)</span><br></pre></td></tr></table></figure><h2 id="http"><a href="#http" class="headerlink" title="http"></a>http</h2><p>详细的内容可以看看</p><p>04_HTTP协议.pdf</p><p>常用响应状态码</p><p><img src="https://cdn.jsdelivr.net/gh/Ggboy001/images/img/202312081606165.png" alt="image-20231018115021134"></p><p><img src="https://cdn.jsdelivr.net/gh/Ggboy001/images/img/202312081606166.png" alt="image-20231018115131696"></p><p>端口：<br>应用程序的数字标识，主要作用是实现不同主机应用程序之间的通信</p><hr><h3 id="创建http服务"><a href="#创建http服务" class="headerlink" title="创建http服务"></a>创建http服务</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const http = require(&#x27;http&#x27;)</span><br><span class="line">const sever = http.createServer((request, response) =&gt; &#123;</span><br><span class="line">    response.end(&#x27;hello sever&#x27;)</span><br><span class="line">&#125;)</span><br><span class="line">sever.listen(9000, () =&gt; &#123;</span><br><span class="line">    console.log(&#x27;服务启动&#x27;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>后端和服务器打交道入门注意事项:</p><ul><li><p>当服务启动后，更新代码 必须重启服务才能生效</p></li><li><p>响应内容中文乱码的解决办法</p></li></ul><blockquote><p>response.setHeader(‘content-type’,’text&#x2F;html;charset&#x3D;utf-8’)</p></blockquote><ul><li>HTTP 协议默认端口是 80 。HTTPS 协议的默认端口是 443, HTTP 服务开发常用端口有 3000， 8080，8090，9000 等</li></ul><p>如果端口被其他程序占用，可以使用 资源监视器 找到占用端口的程序，然后使用 任务管理器 关闭 对应的程序</p><h3 id="获取http请求报文"><a href="#获取http请求报文" class="headerlink" title="获取http请求报文"></a>获取http请求报文</h3><p>这是在创建服务时的哪个函数的回调函数中的参数里面的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const http=require(&#x27;http&#x27;)</span><br><span class="line">const sever=http.createSever((request,response)=&gt;&#123;</span><br><span class="line">//每当网页向这个服务器发送请求,内部就会执行这个函数,并且这两个形参就是有关于请求和响应的对象</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Ggboy001/images/img/202312081606167.png" alt="image-20231019103037607"></p><p>注意： request.headers 将请求信息转化成一个对象，并将属性名都转化成了『小写』</p><h3 id="url模块"><a href="#url模块" class="headerlink" title="url模块"></a>url模块</h3><p>专门用来解析URL的</p><p>其实也就相当于request.url,只不过额外封装了一些方法属性</p><p>查询路径，这个还是挺重要的内容</p><p>url的一个重要方法parse</p><p>–额，已经弃用了</p><p>第一个参数放request.url</p><p>第二个参数可以传递一个布尔值来决定是不是要将query参数解析成一个对象</p><p>新方法</p><p>使用URL类来实例化一个对象</p><p>第一个参数放request.url</p><p>第二个参数放域名&#x2F;ip字符串</p><p>searchParams参数之后碰到问题再说吧</p><h3 id="设置响应报文"><a href="#设置响应报文" class="headerlink" title="设置响应报文"></a>设置响应报文</h3><p><img src="https://cdn.jsdelivr.net/gh/Ggboy001/images/img/202312081606168.png" alt="image-20231019105639568"></p><p>前面的fs文件系统模块已经可以和这里有联系了，将写的html文件用fs读取文件到响应体end中</p><h3 id="网页中的URL"><a href="#网页中的URL" class="headerlink" title="网页中的URL"></a>网页中的URL</h3><p>相对路径和绝对路径</p><p>一句话：但凡涉及到路径的，&#x2F;开头的和完整路径都是绝对路径，绝对路径的拼接就是与协议主机名端口的拼接。</p><p>其余都是相对路径。</p><p><img src="https://cdn.jsdelivr.net/gh/Ggboy001/images/img/202312081606169.png" alt="image-20231019144258995"></p><p>项目中主要用绝对路径</p><h3 id="MIME类型"><a href="#MIME类型" class="headerlink" title="MIME类型"></a>MIME类型</h3><p>可以通过设置响应头的Content-Type来表明响应体的MIME类型，浏览器会根据这个类型来处理得到的 资源</p><p>常见的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">html: &#x27;text/html&#x27;,</span><br><span class="line">css: &#x27;text/css&#x27;,</span><br><span class="line">js: &#x27;text/javascript&#x27;,</span><br><span class="line">png: &#x27;image/png&#x27;,</span><br><span class="line">jpg: &#x27;image/jpeg&#x27;,</span><br><span class="line">gif: &#x27;image/gif&#x27;,</span><br><span class="line">mp4: &#x27;video/mp4&#x27;,</span><br><span class="line">mp3: &#x27;audio/mpeg&#x27;,</span><br><span class="line">json: &#x27;application/json&#x27;</span><br></pre></td></tr></table></figure><p>注意:解决乱码问题</p><p>就是用response.setHeader(‘content-type’,’text&#x2F;css;charset&#x3D;utf-8’)</p><h3 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h3><p>node经常会需要输出本来就有的err错误,可以在node api文档中查找error错误那里找到.</p><h3 id="get和post请求场景"><a href="#get和post请求场景" class="headerlink" title="get和post请求场景"></a>get和post请求场景</h3><p>小知识：下面的引入css文件，只要知道具体的文件地址就可以引入到项目中</p><p><img src="https://cdn.jsdelivr.net/gh/Ggboy001/images/img/202312081606170.png" alt="image-20231019151435886"></p><p>先稍微中断一下，学了三四天，当时学完之后感觉非常通透，但过了还不到3天，其实挺多内容都已经忘了，我估计现在都已经遗忘80%了。</p><h2 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h2><h3 id="模块暴露数据的两种方式："><a href="#模块暴露数据的两种方式：" class="headerlink" title="模块暴露数据的两种方式："></a>模块暴露数据的两种方式：</h3><ul><li>module.exports&#x3D;value</li><li>exports.value&#x3D;value</li></ul><p>本质上:modules.exports&#x3D;&#x3D;&#x3D;exports&#x3D;&#x3D;&#x3D;{}</p><p>而且通过require导入所暴露的模块,默认就是modules.exports这个对象</p><h3 id="导入模块"><a href="#导入模块" class="headerlink" title="导入模块"></a>导入模块</h3><p>就一点:用require导入文件模块时用相对路径(.&#x2F;       ..&#x2F;)</p><h4 id="导入文件夹"><a href="#导入文件夹" class="headerlink" title="导入文件夹"></a>导入文件夹</h4><p>本质上:也是导入文件模块</p><ol><li>先看文件夹下package.json文件的main属性对应的文件,有则导入该文件</li><li>否则然后看文件有没有index.js或index.json文件</li></ol><h3 id="require导入模块的基本流程"><a href="#require导入模块的基本流程" class="headerlink" title="require导入模块的基本流程"></a>require导入模块的基本流程</h3><p>require这个生产线背后有六个小动物:</p><p>老鼠说:我把绝对路径和require相对路径拼接成绝对路径</p><p>牛牛说:我在一块小缓存中看看有没有这个绝对路径,有的话,我把原先缓存的绝对路径文件中的module.exports这个对象给你</p><hr><p>老虎说:既然牛牛没有,那我就读取目标文件代码</p><p>小兔兔说:我要把老虎给我的代码包裹成自执行函数(这样就可以执行需要导入的文件里面的代码了),来立即执行代码</p><p>火龙说:我要缓存这个自执行函数,并给牛牛说我缓存了,下次你就有青蛇给的对象了</p><p>青蛇说:既然牛牛没有返回,那我来返回module.exports这个对象吧</p><p>本质上:就是你在多次导入自定义模块时,就只要模块中返回的modules.exports这个对象.这个对象有可能已经缓存过了,不再重新扫描文件了.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">console.log(11);//这行代码导入模块的文件不需要</span><br><span class="line">module.exports = &quot;tesst&quot;//导入模块的文件只要这个</span><br></pre></td></tr></table></figure><p>好处:就是一个项目中引用相同模块时,只缓存一次,就可以多个文件导入,不需要牛牛后面的工序了</p><p><img src="https://cdn.jsdelivr.net/gh/Ggboy001/images/img/202312081606171.png" alt="image-20231021203456795"></p><h2 id="包管理工具"><a href="#包管理工具" class="headerlink" title="包管理工具"></a>包管理工具</h2><p>包：<br>一组特定功能的源码集合</p><p>包管理工具：</p><p>包管理工具是一个通用的概念，很多编程语言都有包管理工具，所以 掌握好包管理工具非常重要</p><p>可以对包进行下载安装，更新删除，上传等操作。</p><p>常用的包管理工具 ：</p><p>下面列举了前端常用的包管理工具 npm yarn cnpm</p><h3 id="require-导入-npm-包基本流程"><a href="#require-导入-npm-包基本流程" class="headerlink" title="require 导入 npm 包基本流程"></a>require 导入 npm 包基本流程</h3><p>其实就是导入文件夹那的知识点</p><ol><li>在当前文件夹下 node_modules 中寻找同名的文件夹 </li><li>在上级目录中下的 node_modules 中寻找同名的文件夹，直至找到磁盘根目录</li></ol><p>自动向上寻找这个特性也就可以不用重复安装包</p><h3 id="很香的小技巧："><a href="#很香的小技巧：" class="headerlink" title="很香的小技巧："></a>很香的小技巧：</h3><p>全局安装nodemon,可以服务端热更新，不用ctrl+c再node了</p><p>npm root -g可以查看全局安装目录</p><p>环境变量：</p><p>当你想要在命令行的任意位置都能打开某个可执行文件时，就可以用环境变量。</p><p>需要注意一下cmd是不是管理员。</p><h3 id="npm配置命令别名"><a href="#npm配置命令别名" class="headerlink" title="npm配置命令别名"></a>npm配置命令别名</h3><p>通过配置命令别名可以更简单的执行命令 </p><p>配置 package.json 中的 scripts 属性</p><p><img src="https://cdn.jsdelivr.net/gh/Ggboy001/images/img/202312081606172.png" alt="image-20231022124622724"></p><p>补充说明：</p><ul><li>npm start 是项目中常用的一个命令，一般用来启动项目 </li><li>npm run 有自动向上级目录查找的特性，跟 require 函数也一样 </li><li>对于陌生的项目，我们可以通过查看 scripts 属性来参考项目的一些操作</li></ul><h3 id="cnpm"><a href="#cnpm" class="headerlink" title="cnpm"></a>cnpm</h3><p>cnpm 是一个淘宝构建的 npmjs.com 的完整镜像，也称为『淘宝镜像』，网址<a href="https://npmmirror.com/">https://npmmirror.com/</a> </p><p>cnpm 服务部署在国内 阿里云服务器上 ， 可以提高包的下载速度</p><p>镜像服务器</p><p>镜像服务器与主服务器的服务内容都是一样的，只是放在一个不同的地方</p><p>npm配置淘宝镜像</p><p><img src="https://cdn.jsdelivr.net/gh/Ggboy001/images/img/202312081606173.png" alt="image-20231022131528311"></p><h3 id="yarn"><a href="#yarn" class="headerlink" title="yarn"></a>yarn</h3><p>yarn 是由 Facebook 在 2016 年推出的新的 Javascript 包管理工具</p><p><img src="https://cdn.jsdelivr.net/gh/Ggboy001/images/img/202312081606174.png" alt="image-20231022133835620"></p><h3 id="npm支持你去发布一个包"><a href="#npm支持你去发布一个包" class="headerlink" title="npm支持你去发布一个包"></a>npm支持你去发布一个包</h3><p>这样别人就可以直接下载包使用了</p><p><a href="https://www.bilibili.com/video/BV1gM411W7ex?p=91&vd_source=787dbb8c92d34b12fcdedf7a3334bf09">091_包管理工具_npm发布一个包_哔哩哔哩_bilibili</a></p><p><img src="https://cdn.jsdelivr.net/gh/Ggboy001/images/img/202312081606175.png" alt="image-20231022134743883"></p><h3 id="牛逼的小技巧："><a href="#牛逼的小技巧：" class="headerlink" title="牛逼的小技巧："></a>牛逼的小技巧：</h3><p>不同的编程语言或操作系统都有包管理工具，很好用的。</p><p><img src="https://cdn.jsdelivr.net/gh/Ggboy001/images/img/202312081606176.png" alt="image-20231022134807066"></p><p>linux安装应用程序通常只需要一行命令即可，chaocolatey就是这样的。通过一行命令即可安装应用程序</p><p>之后再涉及到各个语言或操作系统包管理工具的相关指令就不会觉得难了，无非就是一些需要记忆的指令和参数罢了</p><h2 id="express框架"><a href="#express框架" class="headerlink" title="express框架"></a>express框架</h2><p>简单来说，express 是一个封装好的工具包，封装了很多功能，便于我们开发 WEB 应用（HTTP 服务）</p><h3 id="express使用"><a href="#express使用" class="headerlink" title="express使用"></a>express使用</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//express导包</span><br><span class="line">const express=require(&#x27;express&#x27;)</span><br><span class="line">//初始化express对象</span><br><span class="line">const app=express()//这样就可以使用app上的方法了</span><br></pre></td></tr></table></figure><h3 id="express路由"><a href="#express路由" class="headerlink" title="express路由"></a>express路由</h3><p>本质:<br>由请求方法 ， 路径 和 回调函数组成</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//格式</span><br><span class="line">app.&lt;method&gt;(path，callback)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>小知识：手机和电脑连接再同一局域网下。</p><p>电脑开启node服务器</p><p><img src="https://cdn.jsdelivr.net/gh/Ggboy001/images/img/202312081606177.png" alt="image-20231023102757277"></p><p>手机可以去访问上面的ipv4地址</p><h3 id="获取请求参数"><a href="#获取请求参数" class="headerlink" title="获取请求参数"></a>获取请求参数</h3><p>还是req参数上的一些属性</p><p><img src="https://cdn.jsdelivr.net/gh/Ggboy001/images/img/202312081606178.png" alt="image-20231023104243183"></p><h3 id="获取路由参数"><a href="#获取路由参数" class="headerlink" title="获取路由参数"></a>获取路由参数</h3><p>就是有时候路由当中有些有规则的字符串可以用一个参数来获取这个参数。</p><p>就不用每一个都获取然后返回响应体了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.get(&#x27;/:id.html&#x27;, (req, res) =&gt; &#123;</span><br><span class="line">res.send(&#x27;商品详情, 商品 id 为&#x27; + req.params.id);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="设置响应报文-1"><a href="#设置响应报文-1" class="headerlink" title="设置响应报文"></a>设置响应报文</h3><p><img src="https://cdn.jsdelivr.net/gh/Ggboy001/images/img/202312081606179.png" alt="image-20231023111754994"></p><p>send设置响应体</p><p>可以连贯操作设置响应</p><p>其他响应页挺有用的</p><p>redirect重定向</p><p>download可以设置被下载的文件</p><p>sendFile可以把一个文件当作响应体发过去，就比如响应一个html文件</p><h3 id="express中间件"><a href="#express中间件" class="headerlink" title="express中间件"></a>express中间件</h3><p>中间件（Middleware）本质是一个回调函数</p><p>中间件函数 可以像路由回调一样访问 请求对象（request） ， 响应对象（response）</p><p>中间件的作用：</p><p> 就是 使用函数封装公共操作，简化代码</p><p>类型：</p><p>全局中间件</p><p>每一个请求到达服务端都需要执行的</p><p>函数在use（）中就可以全局使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.use(middleware)</span><br></pre></td></tr></table></figure><p>路由中间件</p><p>只需要对某一些路由进行功能封装</p><p>函数在app.get的第二个参数中就可以</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">app.get(&#x27;/路径&#x27;,`中间件函数1`,`中间件函数2`,(request,response)=&gt;&#123;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="静态资源中间件"><a href="#静态资源中间件" class="headerlink" title="静态资源中间件"></a>静态资源中间件</h4><p>就是在每次请求时拿到路径和资源中的路径进行比较，如果有就返回。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.use(express.static(&#x27;public&#x27;))//这句代码就是把public文件夹作为静态资源文件夹，发请求填路径的时候不用写public，可以直接选择public下面的文件</span><br></pre></td></tr></table></figure><p>小细节：</p><p>静态资源和路由哪个先返回</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//请求路径</span><br><span class="line">127.0.0.1:9000/home</span><br><span class="line">//现在有一个home文件和一个home路由</span><br><span class="line">如果静态资源与路由规则同时匹配，谁先匹配谁就响应,通俗说就是app.get和app.use谁在前面</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="解析请求体"><a href="#解析请求体" class="headerlink" title="解析请求体"></a>解析请求体</h3><p>用一个npm中的body-parser包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">const express = require(&#x27;express&#x27;)</span><br><span class="line">const app = express()</span><br><span class="line">const bodyParser = require(&#x27;body-parser&#x27;)</span><br><span class="line">// app.use(express.static(__dirname + &#x27;/dist&#x27;))</span><br><span class="line">// create application/json parser</span><br><span class="line">var jsonParser = bodyParser.json()</span><br><span class="line"></span><br><span class="line">// create application/x-www-form-urlencoded parser</span><br><span class="line">var urlencodedParser = bodyParser.urlencoded(&#123; extended: false &#125;)</span><br><span class="line">app.post(&#x27;/home&#x27;, urlencodedParser, (req, res) =&gt; &#123;</span><br><span class="line">    console.log(req.body);//这是重点</span><br><span class="line">    res.send(&#x27;nihao&#x27;)</span><br><span class="line">&#125;)</span><br><span class="line">app.listen(9000, () =&gt; &#123; &#125;)</span><br></pre></td></tr></table></figure><p>防盗链</p><p>暂时用不到</p><p><a href="https://www.bilibili.com/video/BV1gM411W7ex?p=112&spm_id_from=pageDriver&vd_source=787dbb8c92d34b12fcdedf7a3334bf09">112_express框架_防盗链实践_哔哩哔哩_bilibili</a></p><h3 id="路由模块化"><a href="#路由模块化" class="headerlink" title="路由模块化"></a>路由模块化</h3><p>模块路由.js</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const express = require(&#x27;express&#x27;)</span><br><span class="line">let router = express.Router()</span><br><span class="line">router.get(&#x27;/home&#x27;, (req, res) =&gt; res.send(&#x27;home&#x27;))</span><br><span class="line">router.get(&#x27;/search&#x27;, (req, res) =&gt; res.send(&#x27;search&#x27;))</span><br><span class="line"></span><br><span class="line">module.exports = router</span><br></pre></td></tr></table></figure><p>主文件.js</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const RouteHome = require(&#x27;./routes/RouteHome&#x27;)</span><br><span class="line"></span><br><span class="line">app.use(RouteHome)</span><br></pre></td></tr></table></figure><h3 id="模板引擎"><a href="#模板引擎" class="headerlink" title="模板引擎"></a>模板引擎</h3><p>模板引擎主要就是用来将数据和模板分离开，便于管理更改数据的</p><p>就是在发现一些特定的字符串的时候用来解析js表达式的</p><p>ejs是一个包</p><p>ejs.render函数</p><p>负责将第一个参数(字符串,有可能要包含&lt;%&#x3D; 变量名或者就是js表达式%&gt;)中的变量动态替换为第二个参数(对象)中的数据</p><p>主文件.js</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const ejs = require(&#x27;ejs&#x27;)</span><br><span class="line">const fs = require(&#x27;fs&#x27;)</span><br><span class="line">const str = fs.readFileSync(&#x27;./hello.html&#x27;).toString()</span><br><span class="line">let code = &#123; code: &#x27;12&#x27; &#125;</span><br><span class="line"></span><br><span class="line">let str1 = ejs.render(str, &#123; code &#125;)</span><br><span class="line">console.log(str1);</span><br></pre></td></tr></table></figure><p>hello.html文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;</span><br><span class="line">        &lt;%= code%&gt;//这才是重点</span><br><span class="line">    &lt;/h1&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>express使用ejs框架详细见</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// view engine setup</span><br><span class="line">app.set(&#x27;views&#x27;, path.join(__dirname, &#x27;views&#x27;));</span><br><span class="line">app.set(&#x27;view engine&#x27;, &#x27;ejs&#x27;);</span><br><span class="line">//views文件夹就是用来放置含有&lt;%= %&gt;的ejs文件</span><br></pre></td></tr></table></figure><p><a href="https://www.bilibili.com/video/BV1gM411W7ex?p=118&vd_source=787dbb8c92d34b12fcdedf7a3334bf09">118_express框架_express中使用ejs_哔哩哔哩_bilibili</a></p><h3 id="express-generator"><a href="#express-generator" class="headerlink" title="express-generator"></a>express-generator</h3><p>快速生成express的骨架</p><p>使用express指令生成框架</p><h3 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h3><p><a href="https://www.bilibili.com/video/BV1gM411W7ex?p=120&spm_id_from=pageDriver&vd_source=787dbb8c92d34b12fcdedf7a3334bf09">120_express框架_查看文件上传报文_哔哩哔哩_bilibili</a></p><h3 id="案例我会做的"><a href="#案例我会做的" class="headerlink" title="案例我会做的"></a>案例我会做的</h3><p>不准备学习过多的细节</p><p>就先了解后端开发的流程，讲究一个快。</p><h2 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h2><p>管理数据的数据库</p><h3 id="三个核心概念"><a href="#三个核心概念" class="headerlink" title="三个核心概念"></a>三个核心概念</h3><p><img src="https://cdn.jsdelivr.net/gh/Ggboy001/images/img/202312081606180.png" alt="image-20231024194630081"></p><p>Mongoose</p><p>Mongoose 是一个对象文档模型库</p><p>不过就是一个包，用他的api实现对mongodb数据库的数据的操作</p><h4 id="利用mongoose操作数据库步骤："><a href="#利用mongoose操作数据库步骤：" class="headerlink" title="利用mongoose操作数据库步骤："></a>利用mongoose操作数据库步骤：</h4><ol><li>导包连接</li><li>创建模型（复用和限制数据类型）</li></ol><blockquote><p>用这个模型来对应集合，这个创建模型的方法需要传入设置属性具体的数据类型的对象</p></blockquote><ol start="3"><li>使用模型上面的方法来对这个集合实现增删改查的操作</li></ol><p>方法：</p><p>增：create ()</p><p>把对象参数插入数据库中</p><p>删：delete(one&#x2F;many)</p><p>把参数对象(可能只有一个id属性)中的在集合中给删了</p><p>改：update(one&#x2F;many)</p><p>把第一个参数对象(可能只有一个id属性)中的在集合中进行更改为第二个参数对象</p><p>查：find</p><p>查找第一个参数对象(空对象查所有),第二个参数数组是需要获得的文档属性</p><p>此处还有skip跳过几个数据,limit要几个数据,这两个都是传入数字或字符串</p><p>使用场景:</p><p>社交媒体应用程序：社交媒体平台通常需要处理大量用户生成的数据，例如个人资料信息、帖子、评论和媒体文件。使用MongoDB可以更方便地存储和管理这些动态的和半结构化的数据。</p><p>内容管理系统（CMS）：一些内容管理系统需要管理不同类型的内容，例如文章、图片、视频等。MongoDB可以提供更灵活的数据模型，支持这些不同类型的内容，并且可以轻松地处理不断变化的数据结构。</p><h2 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h2><p>使用mysql包连接数据库时出现以下报错，主要是因为</p><p>mysql8 之前的版本中加密规则是mysql_native_password,而在mysql8之后,加密规则是caching_sha2_password, </p><p>我的是mysql8</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27;Client does not support authentication protocol requested by server; consider upgrading MySQL client&#x27;</span><br></pre></td></tr></table></figure><p>解决之后，注意：用户名是root，以后的密码就是123456，不是ggbond</p><h3 id="mysql语法"><a href="#mysql语法" class="headerlink" title="mysql语法"></a>mysql语法</h3><h4 id="增"><a href="#增" class="headerlink" title="增"></a>增</h4><p>执行insert into获得的result是对象</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO table_name ( field1, field2,...fieldN )</span><br><span class="line">                       VALUES</span><br><span class="line">                       ( value1, value2,...valueN );</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">let str = &#x27;insert into library (categoryID) values(?)&#x27;</span><br><span class="line">db.query(str, [&#x27;r1&#x27;], (err, result) =&gt; &#123;</span><br><span class="line">    if (err)</span><br><span class="line">        console.log(err.message);</span><br><span class="line">    console.log(result.affectedRows === 1);//判断是否插入成功</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>简便插入</p><p>就是当一条记录中有很多属性的时候,可以拿到这个对象(当然对象中的属性因该和数据表中的键名一致)</p><p>原理:就是把一个对象按其属性名插入到数据表中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//增的便捷写法</span><br><span class="line">let obj = &#123; categoryID: &#x27;123&#x27;, categoryName: &#x27;书籍&#x27; &#125;</span><br><span class="line">let strAdd = &#x27;insert into library set ?&#x27;</span><br><span class="line">db.query(strAdd, obj, (err, result) =&gt; &#123;</span><br><span class="line">    if (err)</span><br><span class="line">        console.log(err.message);</span><br><span class="line">    console.log(result.affectedRows === 1);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">UPDATE table_name SET field1=new-value1, field2=new-value2</span><br><span class="line">[WHERE Clause]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">let strUpdate = &#x27;update library set categoryName=? where categoryID=?&#x27;</span><br><span class="line">let obj = &#123; categoryName: &#x27;风景&#x27;, categoryID: &#x27;12&#x27; &#125;</span><br><span class="line">db.query(strUpdate, [obj.categoryName, obj.categoryID], (err, results) =&gt; &#123;</span><br><span class="line">    if (err) console.log(err.message);</span><br><span class="line">    if (results.affectedRows === 1) &#123;</span><br><span class="line">        console.log(&#x27;更新成功&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>便捷更新</p><p>原理:就是根据筛选条件把对象中的属性插入数据表中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">let strUpdate = &#x27;update library set ? where categoryID=?&#x27;</span><br><span class="line">let obj = &#123; categoryName: &#x27;风景&#x27;, categoryID: &#x27;r2&#x27; &#125;</span><br><span class="line">db.query(strUpdate, [obj, obj.categoryID], (err, results) =&gt; &#123;</span><br><span class="line">    if (err) console.log(err.message);</span><br><span class="line">    if (results.affectedRows === 1) &#123;</span><br><span class="line">        console.log(&#x27;更新成功&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DELETE FROM table_name [WHERE Clause]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>也很简单</p><p>标记删除</p><p>一般不把数据从数据表中真正删除,而是通过一个字段来标记这个记录是否被删除,防止用户误操作还想要恢复.</p><p><img src="https://cdn.jsdelivr.net/gh/Ggboy001/images/img/202312081606181.png" alt="image-20231026150614510"></p><h4 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">使用占位符进行值查询</span><br><span class="line">let str = &#x27;select * from reader where id=? and name=?&#x27;</span><br><span class="line">db.query(str, [&#x27;r1&#x27;, &#x27;2&#x27;], (err, result) =&gt; &#123;</span><br><span class="line">    if (err)</span><br><span class="line">        console.log(err.message);</span><br><span class="line">    console.log(result);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>上面的result只有查询时会是一个数组,其余操作均是对象.</p><p>学完一小节就要总结总结</p><p>前端要增</p><p>增加的记录对象给了后端,然后就可以便捷插入了,比如表单填个人信息注册</p><p>前端要删</p><p>在删除的时候可以拿到这条记录的主键然后给后端的一个变量就可以删除了,比如注销个人信息</p><p>前端要改</p><p>在改的时候拿到要更新成的记录对象然后给后端通过这个对象中的主键就可以进行更新了,比如要修改个人信息</p><p>前端要查</p><p>在查的时候拿到根据哪一列进行查询再拿到那个值然后传给后端就可以进行查了,比如根据名字查询自己成绩</p><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p>接口的组成:</p><p>请求方法</p><p>接口地址</p><p>请求参数</p><p>响应结果</p><p><img src="https://cdn.jsdelivr.net/gh/Ggboy001/images/img/202312081606182.png" alt="image-20231026162819443"></p><p>RESTful API</p><p>主要特点:</p><ol><li>路径中不要包含动词(create,delete)</li><li>操作资源要与请求方法对应</li><li>操作结果要与Http响应状态码对应</li></ol><p>综合运用,Get,Post,Delete,Put这几种方法来对应增删改查</p><p><img src="https://cdn.jsdelivr.net/gh/Ggboy001/images/img/202312081606183.png" alt="image-20231030154946061"></p><p><img src="https://cdn.jsdelivr.net/gh/Ggboy001/images/img/202312081606184.png" alt="image-20231030155622178"></p><p>API</p><p>就是通过响应json格式来给前端调用接口</p><p>其实这个时候不就已经可以实现前后端结合了吗</p><p>前端根据路径发送ajax请求</p><p>后端根据请求路径做相应的响应，并对数据库做出相应的操作，然后再响应json告诉前端你是否成功，成功可能会给数据供前端渲染。</p><h2 id="会话控制"><a href="#会话控制" class="headerlink" title="会话控制"></a>会话控制</h2><p>HTTP 是一种无状态的协议，它没有办法区分多次的请求是否来自于同一个客户端， 无法区分用户 而产品中又大量存在的这样的需求，所以我们需要通过 会话控制 来解决该问题</p><p>会话控制：就是用来区分用户的</p><p>常见的会话控制的技术：<br>cookie</p><p>session</p><p>token</p><h3 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h3><p>本质来说：就是浏览器用来保存特定数据的一块存储空间</p><p>了解：cookie 是按照域名划分保存的</p><p>特点：</p><p>浏览器向服务器发送请求时，会自动将 当前域名下 可用的 cookie 设置在请求头中，然后传递给服务器</p><p>这个请求头的名字也叫 cookie ，所以将 cookie 理解为一个 HTTP 的请求头也是可以的</p><p>但是cookie是可以伪造的，不安全。</p><h3 id="session"><a href="#session" class="headerlink" title="session"></a>session</h3><p>是保存在服务器端的一块数据，保存当前访问的用户的相关信息</p><p><img src="https://cdn.jsdelivr.net/gh/Ggboy001/images/img/202312081606185.png" alt="image-20231031130601960"></p><p>本质：在登录账号和密码之后，服务器创建session信息，一个session-id的值通过响应头返回给浏览器，</p><p>然后浏览器端就有了这个id信息，并把它作为cookie，每次发请求都带着这个cookie来验证用户的身份。一把锁配一把钥匙。</p><p>当然这也是可以盗取cookie的，但是服务器端就可以摧毁session，算是加了一层保障</p><p>session默认在服务器内存中，容易丢失，保存在数据库或者文件中更合适，</p><p>可以利用connect-mongo包可以完成这个操作。</p><p>一共用到express-session和connect-mongo两个包来完成，一般搭配使用，在npm中去看看就用问题不大</p><p>当然在一些i项目中仍然被大量的使用，但仍然存在着一些问题，但仍然可以使用的。</p><h3 id="JWT"><a href="#JWT" class="headerlink" title="JWT"></a>JWT</h3><p>基本思路：</p><p>就是把后端生成的token给前端保存在localstorage中，然后发请求的时候带着token</p><p>后端拿到的token就是什么header+和后端设置的密钥拼合后进行加密</p><p><img src="https://cdn.jsdelivr.net/gh/Ggboy001/images/img/202312081606186.png" alt="image-20231031153125684"></p><p><img src="https://cdn.jsdelivr.net/gh/Ggboy001/images/img/202312081606187.png" alt="image-20231031153200823"></p><p>还是利用包，jsonwebtoken</p><p>来生成token，解析token看是否过期</p><h2 id="业务分层"><a href="#业务分层" class="headerlink" title="业务分层"></a>业务分层</h2><p>MVC(model-view-controller)</p><p>router.js:负责将请求分发给C层</p><p>controller.js:C层负责处理业务逻辑(V与M的沟通)</p><p>view:V层负责展示页面</p><p>model:M层负责处理数据(增删改查)</p><p><img src="https://cdn.jsdelivr.net/gh/Ggboy001/images/img/202312081606188.png" alt="image-20231030163045380"></p><p>routes—controllers—services文件夹</p><p>用对象的属性对应方法来进行模块之间的连结</p><h3 id="文件上传-1"><a href="#文件上传-1" class="headerlink" title="文件上传"></a>文件上传</h3><p>前端提交文件，就是要拿到这个文件的信息对象信息，放入一个表单对象中（FormData对象），然后发送axios提交的时候需要设置header中的Content-type为mulpart&#x2F;form-data</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">const form=&#123;&#125;</span><br><span class="line">let submit=()=&gt;&#123;</span><br><span class="line">let params=new FormData()</span><br><span class="line">for(let i in form)&#123;</span><br><span class="line">params.append(i,form[i])</span><br><span class="line">&#125;</span><br><span class="line">axios.post(&#x27;admin/user&#x27;,params,&#123;header:&#123;</span><br><span class="line">&quot;Content-type&quot;:&quot;mulpart/form-data&quot;</span><br><span class="line">&#125;&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里需要提前和后端沟通好图片的name属性</p><p>后端接收就是使用一个包multer</p><p>逻辑就是在后端提交表单发请求后进入后端路由之前使用一个中间件先来接收图片并放在一个文件夹下，这个时候req.file会被multer包绑定一个对象可以在里面获取图片名用于拼接路径。req.body 中就是除了文件之外的表单信息</p><h3 id="api文档生成工具"><a href="#api文档生成工具" class="headerlink" title="api文档生成工具"></a>api文档生成工具</h3><p>感觉难的时候大不了再回来看就行了呗</p><p>路由的作用：</p><p>前端中，可以根据路径响应静态资源</p><p>后端中，可以根据前端请求的路径做出对数据库的相关操作</p><p>举个例子，查询孙零一的成绩</p><p>首先，前端在输入框里面输入孙零一，点击搜索按钮，搜索按钮已经绑定了事件，一点击按钮，就开始发送ajax请求，把输入框里面的孙零一当作params参数传给了后端的路由，</p><p>其次，后端路由拿到了这个参数中的孙零一，把这个孙零一传给了对ggbond数据库中grade成绩表的查询语句，</p><p>然后查到了grade成绩表中孙零一的成绩，包装成了一个json，</p><p>最后就可以由后端路由响应给前端，然后前端再进行渲染页面的操作。</p><p>记录我第一次实现前后端结合的小项目。</p><p>项目需求：实现成绩单的增删改查</p><p>前端：vue2，后端：nodejs</p><p>第一步，先完成前端页面，搞定</p><p>第二步，数据表搞好了</p><p>第三步，搞后端</p><p>搞成了，可以直接渲染出来数据了。</p><p>有个问题，就是不知道为什么前端代理服务器和后端服务器端口必须设置成9000.</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vue3基础知识学习</title>
      <link href="/2023/12/08/vue3%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/"/>
      <url>/2023/12/08/vue3%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue3基础内容学习"><a href="#Vue3基础内容学习" class="headerlink" title="Vue3基础内容学习"></a>Vue3基础内容学习</h1><h3 id="setup"><a href="#setup" class="headerlink" title="setup"></a>setup</h3><p>vue3新的配置项</p><p>数据、方法、钩子函数等等配置项可直接写在setup配置项中。</p><hr><p>注意:</p><blockquote><p>setup执行时间:</p><p>在beforeCreate之前,并且setup之中的this是undefined</p><p>两个参数：</p><p>props</p><p>context：</p><blockquote><p>attrs</p></blockquote><blockquote><p>emit</p></blockquote><blockquote><p>slots</p></blockquote><p>自定义指令，父组件里面使用子组件，给子组件绑定了自定义指令&#x3D;”事件”，事件父组件写，自定义的指令子组件触发</p></blockquote><h3 id="ref函数"><a href="#ref函数" class="headerlink" title="ref函数"></a>ref函数</h3><p>vue3实现响应式的函数</p><ul><li>接收的数据可以是：基本类型、也可以是对象类型。</li><li>基本类型的数据：响应式依然是靠<code>Object.defineProperty()</code>的<code>get</code>与<code>set</code>完成的。</li><li>对象类型的数据：内部 <i style="color:gray;font-weight:bold">“ 求助 ”</i> 了Vue3.0中的一个新函数—— <code>reactive</code>函数。</li></ul><h3 id="reactive函数"><a href="#reactive函数" class="headerlink" title="reactive函数"></a>reactive函数</h3><p>定义一个对象类型的响应式数据，不是基本类型</p><p>内部基于 ES6 的 Proxy 实现，通过代理对象操作源对象内部数据进行操作。</p><p>Vue3.0的响应式</p><p>实现原理: </p><ul><li>通过Proxy（代理）:  拦截对象中任意属性的变化, 包括：属性值的读写、属性的添加、属性的删除等。</li><li>通过Reflect（反射）:  对源对象的属性进行操作。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">new Proxy(data, &#123;</span><br><span class="line">// 拦截读取属性值</span><br><span class="line">    get (target, prop) &#123;</span><br><span class="line">    //有人读取了该属性</span><br><span class="line">    return Reflect.get(target, prop)</span><br><span class="line">    &#125;,</span><br><span class="line">    // 拦截设置属性值或添加新属性</span><br><span class="line">    set (target, prop, value) &#123;</span><br><span class="line">    //有人修改了该属性,我要去更新页面了</span><br><span class="line">    return Reflect.set(target, prop, value)</span><br><span class="line">    &#125;,</span><br><span class="line">    // 拦截删除属性</span><br><span class="line">    deleteProperty (target, prop) &#123;</span><br><span class="line">    //有人删除了该属性,我要去更新页面了</span><br><span class="line">    return Reflect.deleteProperty(target, prop)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">proxy.name = &#x27;tom&#x27;   </span><br></pre></td></tr></table></figure><p>注意:数据代理和响应式不一样,前者是修改了一个对象的属性另一个对象的属性也跟着修改了,响应式是在代理的基础上需要进行更新页面(操作dom等等底层操作)的操作</p><h4 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h4><p>就是变成了一个函数</p><h4 id="侦听属性"><a href="#侦听属性" class="headerlink" title="侦听属性"></a>侦听属性</h4><p>watch</p><p>参数：监视的目标（有ref定义的基本类型（多个可以包裹在数组里面），有reactive定义的对象和它的属性（这里需要用到函数写法就箭头函数返回一个你想要的对象属性））</p><p>，回调函数，配置（立即执行，深度监视）</p><p>其实很简单，无非就这几个参数的内容来回变化一下，</p><p><img src="https://cdn.jsdelivr.net/gh/Ggboy001/images/img/202312081559197.png" alt="image-20231004150557248"></p><p>小坑：</p><ul><li>监视reactive定义的响应式数据时：oldValue无法正确获取、强制开启了深度监视（deep配置失效）。</li><li>监视reactive定义的响应式数据中某个属性（是个对象）时：deep配置有效。</li></ul><h4 id="watchEffect"><a href="#watchEffect" class="headerlink" title="watchEffect"></a>watchEffect</h4><p>只有一个回调作为参数</p><p>牛逼的是只要这个回调函数中依赖的数据发生了变化，就会被调用</p><h4 id="生命周期钩子"><a href="#生命周期钩子" class="headerlink" title="生命周期钩子"></a>生命周期钩子</h4><h4 id="自定义hook（这个是重点）"><a href="#自定义hook（这个是重点）" class="headerlink" title="自定义hook（这个是重点）"></a>自定义hook（这个是重点）</h4><p>什么是hook？—— 本质是一个函数，把setup函数中使用的Composition API进行了封装。</p><p>自定义hook的优势: 复用代码, 让setup中的逻辑更清楚易懂。</p><h4 id="toRef和toRefs"><a href="#toRef和toRefs" class="headerlink" title="toRef和toRefs"></a>toRef和toRefs</h4><p>作用：创建一个 ref 对象，其value值指向另一个对象中的某个属性。</p><p>应用就是：拿到响应式对象中的属性值并且不丢失响应式</p><p>语法：<code>const name = toRef(person,&#39;name&#39;)</code></p><h1 id="其它-Composition-API"><a href="#其它-Composition-API" class="headerlink" title="其它 Composition API"></a>其它 Composition API</h1><h2 id="1-shallowReactive-与-shallowRef"><a href="#1-shallowReactive-与-shallowRef" class="headerlink" title="1.shallowReactive 与 shallowRef"></a>1.shallowReactive 与 shallowRef</h2><p>一句话：浅浅的响应式</p><ul><li><p>shallowReactive：只处理对象最外层属性的响应式（浅响应式）。</p></li><li><p>shallowRef：只处理基本数据类型的响应式, 不进行对象的响应式处理。</p></li><li><p>什么时候使用?</p><ul><li>如果有一个对象数据，结构比较深, 但变化时只是外层属性变化 &#x3D;&#x3D;&#x3D;&gt; shallowReactive。</li><li>如果有一个对象数据，后续功能不会修改该对象中的属性，而是生新的对象来替换 &#x3D;&#x3D;&#x3D;&gt; shallowRef。</li></ul></li></ul><h2 id="2-readonly-与-shallowReadonly"><a href="#2-readonly-与-shallowReadonly" class="headerlink" title="2.readonly 与 shallowReadonly"></a>2.readonly 与 shallowReadonly</h2><p>一句话：只能读</p><ul><li>readonly: 让一个响应式数据变为只读的（深只读）。</li><li>shallowReadonly：让一个响应式数据变为只读的（浅只读）。</li><li>应用场景: 不希望数据被修改时。</li></ul><h2 id="3-toRaw-与-markRaw"><a href="#3-toRaw-与-markRaw" class="headerlink" title="3.toRaw 与 markRaw"></a>3.toRaw 与 markRaw</h2><p>一句话：响应式对象成了普通的不能再普通的对象</p><ul><li>toRaw：<ul><li>作用：将一个由<code>reactive</code>生成的<strong style="color:orange">响应式对象</strong>转为<strong style="color:orange">普通对象</strong>。</li><li>使用场景：用于读取响应式对象对应的普通对象，对这个普通对象的所有操作，不会引起页面更新。</li></ul></li><li>markRaw：<ul><li>作用：标记一个对象，使其永远不会再成为响应式对象。</li><li>应用场景:<ol><li>有些值不应被设置为响应式的，例如复杂的第三方类库等。</li><li>当渲染具有不可变数据源的大列表时，跳过响应式转换可以提高性能。</li></ol></li></ul></li></ul><h4 id="自定义ref"><a href="#自定义ref" class="headerlink" title="自定义ref"></a>自定义ref</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">//最简单的定义形式</span><br><span class="line">function myRef(value)&#123;</span><br><span class="line">return customRef((track,trigger)=&gt;</span><br><span class="line">&#123;</span><br><span class="line">return &#123;</span><br><span class="line">get(value)&#123;</span><br><span class="line">track()</span><br><span class="line">return value</span><br><span class="line">&#125;,</span><br><span class="line">set(newValue)&#123;</span><br><span class="line">value=newValue</span><br><span class="line">trigger()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line">let hello=ref(&#x27;hello&#x27;)</span><br></pre></td></tr></table></figure><h4 id="provide-与-inject"><a href="#provide-与-inject" class="headerlink" title="provide 与 inject"></a>provide 与 inject</h4><p>作用：实现<strong style="color:#DD5145">祖与后代组件间</strong>通信</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">祖组件中：</span><br><span class="line"><span class="title function_">setup</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> car =<span class="title function_">reactive</span>(&#123;</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&#x27;ben&#x27;</span>,</span><br><span class="line">        <span class="attr">price</span>:<span class="string">&#x27;20&#x27;</span></span><br><span class="line">    &#125;),</span><br><span class="line">        <span class="title function_">provide</span>(<span class="string">&#x27;car&#x27;</span>,car)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">孙组件中：</span><br><span class="line"><span class="title function_">setup</span>(<span class="params"></span>)&#123;</span><br><span class="line">   <span class="keyword">const</span> car= <span class="title function_">inject</span>(<span class="string">&#x27;car&#x27;</span>)</span><br><span class="line">   <span class="keyword">return</span> &#123;car&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="选项式Api问题："><a href="#选项式Api问题：" class="headerlink" title="选项式Api问题："></a>选项式Api问题：</h4><p><img src="https://cdn.jsdelivr.net/gh/Ggboy001/images/img/202312081559198.png" alt="image-20231004221208969"></p><h4 id="组合式Api的优势："><a href="#组合式Api的优势：" class="headerlink" title="组合式Api的优势："></a>组合式Api的优势：</h4><p><img src="https://cdn.jsdelivr.net/gh/Ggboy001/images/img/202312081559199.png" alt="image-20231004221045414"></p><h1 id="新的组件-先了解"><a href="#新的组件-先了解" class="headerlink" title="新的组件(先了解)"></a>新的组件(先了解)</h1><h2 id="1-Fragment"><a href="#1-Fragment" class="headerlink" title="1.Fragment"></a>1.Fragment</h2><ul><li>在Vue2中: 组件必须有一个根标签</li><li>在Vue3中: 组件可以没有根标签, 内部会将多个标签包含在一个Fragment虚拟元素中</li><li>好处: 减少标签层级, 减小内存占用</li></ul><h2 id="2-Teleport"><a href="#2-Teleport" class="headerlink" title="2.Teleport"></a>2.Teleport</h2><ul><li><p>什么是Teleport？—— <code>Teleport</code> 是一种能够将我们的<strong style="color:#DD5145">组件html结构</strong>移动到指定位置的技术。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;teleport to=&quot;移动位置&quot;&gt;</span><br><span class="line">&lt;div v-if=&quot;isShow&quot; class=&quot;mask&quot;&gt;</span><br><span class="line">&lt;div class=&quot;dialog&quot;&gt;</span><br><span class="line">&lt;h3&gt;我是一个弹窗&lt;/h3&gt;</span><br><span class="line">&lt;button @click=&quot;isShow = false&quot;&gt;关闭弹窗&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/teleport&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="3-Suspense"><a href="#3-Suspense" class="headerlink" title="3.Suspense"></a>3.Suspense</h2><ul><li><p>等待异步组件时渲染一些额外内容，让应用有更好的用户体验</p></li><li><p>使用步骤：</p><ul><li><p>异步引入组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;defineAsyncComponent&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Child</span> = <span class="title function_">defineAsyncComponent</span>(<span class="function">()=&gt;</span><span class="keyword">import</span>(<span class="string">&#x27;./components/Child.vue&#x27;</span>))</span><br></pre></td></tr></table></figure></li><li><p>使用<code>Suspense</code>包裹组件，并配置好<code>default</code> 与 <code>fallback</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div class=&quot;app&quot;&gt;</span><br><span class="line">&lt;h3&gt;我是App组件&lt;/h3&gt;</span><br><span class="line">&lt;Suspense&gt;</span><br><span class="line">&lt;template v-slot:default&gt;</span><br><span class="line">&lt;Child/&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;template v-slot:fallback&gt;</span><br><span class="line">&lt;h3&gt;加载中.....&lt;/h3&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;/Suspense&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>blog可以加密——（原来这么简单password：ggbond）</title>
      <link href="/2023/08/20/blog%E5%8F%AF%E4%BB%A5%E5%8A%A0%E5%AF%86-%E7%A5%9E%E5%A5%87/"/>
      <url>/2023/08/20/blog%E5%8F%AF%E4%BB%A5%E5%8A%A0%E5%AF%86-%E7%A5%9E%E5%A5%87/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="ac33e30737301d89cea31c750dc9a0c3e93e1077dcd5d73ebb3c7c3caba9678f">fc1b8cbcea17e8627c93974c10e8cdb8175e728a0a04f097fe5bda96709c241130175b4b923c10125595947f86dd7fac6684f7123e91c94728069c9188cb1591be6d4185cfb9c64b614e59d276b41725322d2b9e10701aca7d39836247c85b80347bf6c3190f2f8ef86d41307978b5cef2cc64cfad0a1bb530d5ed748aef08a2baa2e4f5d686e156e6589b0411435dbd74cac277bf477a9b8fbccbcda127121fe90bba220143d1c49c3b1a843e2f7acc9b7dfdb39ef42fde5b8d8ff2e032c020abd40e9aec537fcd4d45f2776ae535d3b6db45b090a2d51aaafb6a08d1947dab10873e4798220575e58a09ab94a6438b5cbec06b6a8699c2837b18fa5e3712cfeb8c850d51b7c8647d87e8cc6942dbe584286494ee26c52e3b8521085d43520a6ad2dfb68e0172fb3667a75098b4d1ddf8e8d6276b6205e9ab5da51281655f00a94368413eedbf9202aeba9389d253a26d69368017e46956a42235828ea97e93bfbca2ca61da3ffcf36c211b7fa62832b2e923b39e6da4c13063706c80a090bf29a43b0aa76ddddee4491e5ce39c61c18d246141ddb33e5da73949252b05dc58bffca392f0710be407340d2731413a053ca1eb744694dc04bef2ed531096863e9006c8e7bfbd9e707d688e280c4abea4cba7056e462a3868bd593156baeffa26bedeac1df5c01c73563ab586d1eba250b0ec6d3c26eec8197782c33b50005879343c5fdc3dcb46be629bd98520899fe53d96a569969e2d43bd7cd565c2770a3e49ed23db7aa0a3f5c2e5a7d36cdbb5c580f5edf30a2817599beaf8ecd7d1f62955a8e20d20b9d6e24df79030b88d426a2931fcce650233e99dfeb3681e3eea0d30550aedf880aa1f91330bb078cf2aab79266771ca98a455fefe485ab348b35aa222b9b44577adb0f72678ff5929c7804b04fd32ccdb090e2d0bf646f0ef849ab94564a3d13d6118a8be568efeaf076c7dbed51ae7b3e7b097e33d2e2dd2f9d42714c1a86f81b82db98f6e7ff7ce8224b6cbfd334dc9924e4d6fd7d18bc2c7dffff3b87f77659b60391372ce53ade155bd2d9bfd9c2ebaf5e72d6d0a152ff7c421de6019d2bd16df8c4d0a3358928661e2ad3950501dd396afb541e94530e3bbfe29daadaf9dc9088772ac41b2517f92e1c391069dbe822e1f13b79cc724e877c26e10b7f544a1563db3d402402afc31b6a3e1d476e4acac956f3aa284ec4af267c406f530903036eb64c3e8d1d34e2cf8d80f1a96984013d0be2b6f8bfa7a434adb32c9a5540d682bbbb00e2fbc6a9a5def123e5acf17ba1ae3ff257cc82a1fe22294039b1c34ac7545ea74561c4f6e2e4b000a4a85d68158d3fc8ec4b5d7fd58ffd3a90f926c338cb70090ed9668da78134705f8ec8c4a2d461f79c20803306a8abc411cb039e2ba1dfce573394b4a1252154b131ca7dc0df4bf5f8d5175b3b1e0067e2cea66bda1730d8fdbf144473d4922201e5b608d6a8c0d0d1a2d8d6f1c50d56af0e6822b67354394ea792ab7671a0da64feef8b4c44f6cbf671963963a3973d9ffb86312b49ad075a75c6cf29fdb565173ca920534e1ac4dd9e1da5d79146bf31bac7fe47dd309a31cb7da9c7f4454b640bcb7478415f15b7f9648f9e9a51095c4ff6839eb3b5fc1699fad85ac85bb9a72db7c7d7539aeb2872b78aaec374c186a464ab23c99613d8093b716e7b729e7c8bf066a7a9a62f34ee69fea3430fe45ddbb420f1a5f092027142782f7afbdb8d06cabbd1f22bc8e4351f1ed7c75820f1e017c7b1e8188e6bd6683a4ff59dbc95cd4a5e3eec7e0a4af8c0fac9a7fadf0ad29e9fa15813a7c70da9d6f667d765f206dec137a3d5f19651e5815366acd222fa9d3d936302a3c8f237c5f278ac1b56247c34080151e7af770e1395b526b9580c1edebf425d1ca0db3f7df1193beb2a8db727452b9f62fd46fff4dd29380eda543cc35a816a66229e2f48b609c4f1e826411b8d2d692309ddf8b01e8a8df5d727d8de151dc4c6af9ed95adc92205cce0c0e6c4c9e6e69678586e8c55119a58e62e10e6ea3e6a3da3af019258fcdd4e272bb8e7c8b1f4a577b348650b048290d49016f48ff376d6325a07e3c5034e35dd8f940a2c684f3cc06ff35f6ceeb636525b536873299dfaf0834e08cca885f8a2b617c00725b4029e0135385b7dcf759638a9e41ae7b94852e1332d0270494b64e152c0f51dfc1b88f1bd9b030481e0ebff264c9939d46e87baf9b11fc5b8affe8b0e784e808eaac57d0a1a</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">我是谁?</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>追求自己的typing极致</title>
      <link href="/2023/08/20/%E4%BF%AE%E6%AD%A3%E8%87%AA%E5%B7%B1%E7%9A%84%E6%89%93%E5%AD%97%E9%97%AE%E9%A2%98%EF%BC%8C%E8%BF%BD%E6%B1%82%E8%87%AA%E5%B7%B1%E7%9A%84typing%E6%9E%81%E8%87%B4/"/>
      <url>/2023/08/20/%E4%BF%AE%E6%AD%A3%E8%87%AA%E5%B7%B1%E7%9A%84%E6%89%93%E5%AD%97%E9%97%AE%E9%A2%98%EF%BC%8C%E8%BF%BD%E6%B1%82%E8%87%AA%E5%B7%B1%E7%9A%84typing%E6%9E%81%E8%87%B4/</url>
      
        <content type="html"><![CDATA[<blockquote><p>今天浅浅说一下键盘打字。<br>重要性不言而喻，打字打的快和准，那是相当重要的，这样的话可以节省自己一部分时间，是提升效率的关键一环，也避免让自己的思路被打错字而干扰。</p></blockquote><h3 id="心血来潮"><a href="#心血来潮" class="headerlink" title="心血来潮"></a>心血来潮</h3><p>自己一开始的打字的目的仅仅就是为了可以打字盲打，当然这只是一个隐藏目的，毕竟谁没事是为了打字而打字啊（doge）。已经可以盲打了，心血来潮就想着修正一些小细节追求一下极致，so系统的感知一下自己并改善一些小细节。<br>接下来步入主题，record自己打字出现的问题。</p><h3 id="舒服的fell"><a href="#舒服的fell" class="headerlink" title="舒服的fell~"></a>舒服的fell~</h3><p>首先就是打字的时候一定要要自己一个习惯性的姿势，因为自己在打字的开始不是习惯性的姿势的话，或者是一个有点拘束有点不舒服，那必然会导致打字感觉不是那么的流畅，就比较容易影响自己的工作体验，严重会影响到自己的思路。自己要有习惯上的一个姿势，需要让自己可以很自然的把左手的食指放在F上，右手食指很自然的放在J上，也就是摸着键盘的突起，这是保证你可以找到字母的基础。放上去的时候一定要是自己很自然的状态，觉察点就是手放在键盘上会不会感觉到有点拘束。</p><ul><li>small问题<blockquote><p>打字过程中说实话如果自己的手腕是腾空的长时间就会感觉到酸疼，但我觉得这个问题还好，因为你不太可能一直在敲键盘，随随便便空闲的时候就可以放松一下手腕，所以这一个不是什么问题。</p></blockquote></li></ul><h3 id="emmm-打字还有小心思？"><a href="#emmm-打字还有小心思？" class="headerlink" title="emmm?打字还有小心思？"></a>emmm?打字还有小心思？</h3><p>接下来再分析一下自己的打字会有的小心思，就是自己有时候会很害怕按错键，这是我现在觉得非常不应该的，原因大概就是每个人在刚开始学习打字前都会有的心理就是害怕自己打错字，所以我就一直延续到了现在。然后现在即使打字也挺熟练的了，但还是会有时候害怕自己打错就大脑空空需要眼睛看而不是盲打，这就会影响自己的打字速度和头脑思路了。其实一开始害怕打字出错就是一个误区，出错是必然的，不然为什么会给你回退键呐，而且本身按回退键的熟练程度仅仅次于空格键，所以我想说的是打字出错是必然的，就算出错了按个回退就可以改正了，而一直担心自己出错不去试错就会导致一直处于遇到自己担心出错的字符就用眼睛看，导致自己形成习惯性动作，会降低自己的打字速度的上限。</p><h4 id="举个例子"><a href="#举个例子" class="headerlink" title="举个例子"></a>举个例子</h4><p>接下来自己说的就是上面的一个实例，英文字母已经可以摸得很清楚了，但是一些特殊字符记得不清楚，而且自己又是一个程序员，会经常用到一些字符，如果每次遇到都大脑空空肯定是会影响自己的效率的。</p><h4 id="一个字，练一下就完了"><a href="#一个字，练一下就完了" class="headerlink" title="一个字，练一下就完了"></a>一个字，练一下就完了</h4><p>so之后要保证自己完全不看键盘熟练不拘束的打出来自己想要的所有字符。刻意练习 ，冲。<br>练法很简单就是自己心中随便想一个字符，然后自己就直接快速盲打。每打完一个之后食指都要归位。</p><h3 id="还有问题"><a href="#还有问题" class="headerlink" title="还有问题"></a>还有问题</h3><p>其次是打字的时候有些前后字母会错位，也就是会打乱字母，这是自己打错字的一个原因。这个问题的主要原因就是字母按的先后顺序出错，有些手指头下手快（这可让我如何是好，管不住~~~），这是自己之前打字不注意细节出现的问题。这个问题就需要自己平常打字的时候去注意一下。不需要刻意的去练，仅仅就是记得改善一下就可以。<br>还有就是自己不太经常会看输入法上面的提示文字然后去输数字选字这也是自己会打错字的一个原因，主要是大多数中文汉字短语第一个就是自己要的，所以倾向于输入完直接按空格，虽然会出现部分错误，但我仍然觉得这是最适合我的了。</p><h3 id="最后一个问题（这么多问题我可怎么弄啊）"><a href="#最后一个问题（这么多问题我可怎么弄啊）" class="headerlink" title="最后一个问题（这么多问题我可怎么弄啊）"></a>最后一个问题（这么多问题我可怎么弄啊）</h3><p>最后就是自己打英文字母太慢了，分析一下，为什么中文可以那么快，就是自己把中文拼音给内化了，不需要自己想到中文还要去想拼音该如何拼，直接手指头就自动去索引了。所以打英文慢就是自己压根连单词拼写都没记住、记住的也不会发音导致自己一个一个字母去想，去拼能不慢吗。还是由于自己的英语水平比较差劲的原因。只能平常多打打英文句子多练练英文手感。<br>ok，over.(zhelianggeyingwendadehaitingkuaide)<br>希望自己的打字水平可以改善一下。<br>追求一下自己的typing极致。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vue2学习</title>
      <link href="/2023/08/15/vue2%E5%AD%A6%E4%B9%A0/"/>
      <url>/2023/08/15/vue2%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="开始vue的学习"><a href="#开始vue的学习" class="headerlink" title="开始vue的学习"></a>开始vue的学习</h2><p>本人是跟着b站张天禹老师学习的vue2基础，因为自己比较容易遗忘知识点，所以vue的学习做了笔记，方便自己查看。如果对学习vue的同学有一丢丢的帮助，那再好不过了。</p><h3 id="vue"><a href="#vue" class="headerlink" title="vue"></a>vue</h3><p>概念：一套用于构建用户界面的渐进式js框架。</p><p>特点：</p><ul><li><p>采用组件化模式（html,css,js封装到组件），提高代码复用率、且让代码更好维护</p></li><li><p>声明式编码(心有灵犀),无需直接操作dom,避免命令式编码（一步一步的操作）,提高开发效率</p></li><li><p>虚拟dom+优秀diff算法</p></li></ul><p>vue官方文档的使用(绝对不是把它给背下来,要学会使用,不会的时候要会查阅,用的多的当然记下来是最好的)</p><p>初试Vue：</p><ul><li>想让Vue工作，就必须创建一个Vue实例，且要传入一个配置对象，</li></ul><p>el：就是指定当前Vue实例为哪个容器服务，值通常为css选择器字符串</p><p>data：存储数据，数据供el指定的容器去使用。</p><ul><li>容器中会混入一些Vue语法</li></ul><p>vue实例:</p><!-- 花括号里面要写js表达式,且××可以自动读取到data中的所有属性 --><p>模板(root容器内的html)语法: </p><ul><li><p>插值语法</p></li><li><p>指令语法:</p></li></ul><p>data里面多级嵌套的话,就需要用到(.)</p><p>插值语法其实就是只要vue实例中有的就都可以写入 双花括号，data的作用就是把data中的东西弄到vue实例上</p><p>数据绑定:</p><p>单向数据绑定:就是v-bind: 属性前加冒号引号中的都当作js表达式去解</p><p>双向数据绑定:就是v-model:(就是输入类的,input和textarea,select,,可以直接简写为v-model,因为其默认绑定value)</p><p>$开头的一些方法是vue提供的,可以直接拿来用.</p><p>重要原则：</p><p>由vue管理的函数，一定不要写箭头函数，一旦写了，this就不再是vue实例了 。比如data函数</p><p>比如methods里面配置的函数.比如set,get (   ) </p><p>,简写的监视属性</p><p>不被vue管理的函数,最好写成箭头函数,目标只有一个,this指向vue实例,,,定时器回调函数,ajax回调函数,promise回调函数</p><p>前端主流的框架设计思想：</p><p>就是数据放在对应的地方，模板结构写出来，那怎么把数据整到模板中，就需要学习这个框架中的语法了</p><h3 id="数据代理"><a href="#数据代理" class="headerlink" title="数据代理"></a>数据代理</h3><p>(通过一个对象代理对另一个对象中属性的操作(读&#x2F;写))：</p><p>Object.defineproperty(对象名,’属性名’,{配置项})方法</p><p>配置项:value,enumerable,writable,configurable,</p><p>get(),set()</p><p>就是给对象添加属性的,</p><p>可以实现当值改变了,就可以对应的实现属性值的变化,也就是相当于data的数据绑定</p><p>事件处理</p><ul><li><p>有的时候需要传参,但是又不想吧event搞丢u了,就需要 @click&#x3D;”tip(22,$event)”</p></li><li><p>事件修饰符(.prevent)例如a标签的@click.prevent&#x3D;”tip”,就是阻止a标签跳转</p><p>还可以@click.prevent.stop(修饰符连写)</p><blockquote><p><img src="https://cdn.jsdelivr.net/gh/Ggboy001/images/img/202308151950360.png" alt="image-20230523162257781"></p></blockquote></li></ul><p>键盘事件(keyup\keydown)</p><p><img src="https://cdn.jsdelivr.net/gh/Ggboy001/images/img/202308151950361.png" alt="image-20230523164459841"></p><p>比如:@keyup.enter&#x3D;”tip”</p><p><img src="https://cdn.jsdelivr.net/gh/Ggboy001/images/img/202308151950362.png" alt="image-20230523164935519"></p><h3 id="计算属性-有缓存的优点"><a href="#计算属性-有缓存的优点" class="headerlink" title="计算属性(有缓存的优点)"></a>计算属性(有缓存的优点)</h3><p>涉及到比较复杂的表达式 ,就不要直接写到模板中插值语法中了.</p><p>计算属性会被缓存在第一次读取后.</p><p>但是在其所依赖的数据发生变化时,计算属性中的getter会重新调用去计算得到一个新的返回值给计算属性</p><p>可简写(在只有get时)</p><h3 id="侦听-监视-属性"><a href="#侦听-监视-属性" class="headerlink" title="侦听(监视)属性"></a>侦听(监视)属性</h3><p>用于监视属性,当属性值发生改变的 时候,可以拿到旧值和新值,做出其他的逻辑.  </p><p>handler函数配置项(只有这个的话可以使用简写)</p><p><img src="https://cdn.jsdelivr.net/gh/Ggboy001/images/img/202308151950363.png" alt="image-20230523180907779"></p><p>深度监视配置项deep:true</p><h3 id="绑定class样式-class-从data中取样式名"><a href="#绑定class样式-class-从data中取样式名" class="headerlink" title="绑定class样式(:class)(从data中取样式名)"></a>绑定class样式(:class)(从data中取样式名)</h3><p>字符串写法</p><p>数组写法(要绑定的样式个数不确定,名字也不确定)</p><p>对象写法(要绑定的样式个数确定,名字也确定,但要动态决定用不用)</p><h3 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h3><h3 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h3><p>列表渲染要动态绑定一个:key&#x3D;(只要是唯一的就可以,数字,字符串均可)</p><p>可以默认写index,就不用声明在数组中id,但是这样在打乱数组顺序的时候(比如在数组最前面插入一个对象)通过虚拟DOM对比算法可能会复用错乱的问题.所以这样不行,还是得找唯一标识.</p><p>从服务器请求过来的数据都是有惟一标识的,比如我上次做的项目的  id.</p><p><img src="https://cdn.jsdelivr.net/gh/Ggboy001/images/img/202308151950364.png" alt="image-20230523213649365"></p><p><img src="https://cdn.jsdelivr.net/gh/Ggboy001/images/img/202308151950365.png" alt="image-20230523214452099"></p><p>对于一个由其他的数据2算出来的数据1,你要修改其数据1,就需要直接修改数据2</p><h2 id="come-on！"><a href="#come-on！" class="headerlink" title="come on！"></a>come on！</h2><h3 id="列表过滤"><a href="#列表过滤" class="headerlink" title="列表过滤"></a>列表过滤</h3><p>v-for渲染数组得到一个列表，从输入框里面拿到一个数据进行模糊搜索然后再次渲染。</p><p>其实也不麻烦，拿到输入的数据，用filter针对数组中的每一个对象中某一字符串进行indexof筛选然后再渲染。</p><h3 id="列表排序"><a href="#列表排序" class="headerlink" title="列表排序"></a>列表排序</h3><p>就还是利用数组的一些方法，这也说明，这些数组字符串的方法，能记还是要记住的，这都算是很基础的东西。</p><h3 id="vue监测数据变化的原理"><a href="#vue监测数据变化的原理" class="headerlink" title="vue监测数据变化的原理"></a>vue监测数据变化的原理</h3><p>通过setter实现监视,且要在vue实例化时或vuecomponent实例化时就传入要检测的数据</p><p>Vue.set(target,’propertyName&#x2F;Index’,value)</p><p>vm.$set(target,’propertyName&#x2F;Index’,value)不能给vm或vm的根数据添加属性</p><p>问题:单纯的对数组中的对象赋值是不奏效的,不是响应式的.也就是说,赋是可以赋值的,但是vue不能检测到数组中的数据发生了改变.要使其感受到到就要用到,push,pop.shift,unshift,reverse,splice,sort</p><p>当然也可以用set接口,只不过原来写属性的地方写索引值</p><p>用了一个包装(先调用原始数组的push方法实现对应的功能,再重新解析模板构建虚拟dom,更新页面),也就是push这个方法已经被vue包装过了,所以这些方法可以被检测得到</p><p>reactive：响应式</p><p>想要在已经创建好vue实例后再添加其他属性，并且是响应式的(有对应的get,set方法的)就可以用vue.set()或者vm.$set(),,,注意:第一参数肯定是对象中的对象</p><p>数据劫持:就是在你数据发生改变的时候,vue对你的数据进行了一些操作,渲染响应等等.</p><h2 id="继续今日份vue学习"><a href="#继续今日份vue学习" class="headerlink" title="继续今日份vue学习"></a>继续今日份vue学习</h2><h3 id="收集表单数据-都是需要写v-model"><a href="#收集表单数据-都是需要写v-model" class="headerlink" title="收集表单数据(都是需要写v-model)"></a>收集表单数据(都是需要写v-model)</h3><p>radio，需要给标签配置value</p><p>checkbox，需要配置value，并且用数组接收</p><p>输入框，下拉框，</p><p>v-model的三个修饰符：</p><p>lazy：失去焦点再收集数据</p><p>number：输入字符串转为有效的数字</p><p>trim：输入首尾空格过滤</p><h3 id="过滤器-本质依旧是函数"><a href="#过滤器-本质依旧是函数" class="headerlink" title="过滤器(本质依旧是函数)"></a>过滤器(本质依旧是函数)</h3><p>定义:对要显示的数据进行特定格式化后再显示(适用于一些简单逻辑的处理)</p><p>将时间戳格式化为日期时间,但是并没有改变原本的数据,是产生新的对应的数据</p><p>可以用 day.js</p><p>模板中的格式  {{time&nbsp;|函数名字}} </p><p><img src="https://cdn.jsdelivr.net/gh/Ggboy001/images/img/202308151950366.png" alt="image-20230525142944383"></p><p>图片中细节</p><p>过滤器之间依次传参,首先拿到的是从前面传过来的参数</p><p>es6默认传参语法</p><p>日期格式可以自己设置</p><h3 id="内置指令"><a href="#内置指令" class="headerlink" title="内置指令"></a>内置指令</h3><ul><li>v-text</li></ul><p>向其所在的标签完全替换文字(用处不多了解,用插值语法比较好)</p><ul><li>v-html</li></ul><p>会产生安全性问题,在网站上动态渲染任意HTML是非常危险的,容易导致xss攻击,永远不要在用户登录体检内容上使用</p><ul><li>v-cloak</li></ul><p>用处不大,就是vue实例创建好后,会删除标签上有这个属性的,配合css可以实现解决网速慢页面展示  {{××}} 的问题</p><ul><li>v-once</li></ul><p>所在节点在初次动态渲染后，就视为静态内容，以后不变了。</p><ul><li>v-pre</li></ul><p> 就是让vue知道这里面没有指令，不用再编译什么的，提高效率。 </p><h3 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h3><p>就是自己去手动去实现dom操作，完成这个指令实现的功能</p><p>写在directives</p><p>函数式写法：(其实是包含了bind和update)</p><p>被调用：指令与元素成功绑定时。和指令所在的模板被重新解析时</p><p>对象式写法：(其中包括三个回调函数)</p><p>{</p><p>指令与元素成功绑定时调用</p><p>bind(){<br>},</p><p>指令所在元素被插入页面时</p><p>inserted(){<br>},</p><p>指令所在模板被重新解析时</p><p>update(){<br>},</p><p>}</p><p>指令名字如果多个单词,用横线连接kebab-case命名,不要用camelCase,在脚本中,就要加上引号了.</p><p>可以定义全局自定义指令(先了解有需求再查)</p><h3 id="周期函数"><a href="#周期函数" class="headerlink" title="周期函数"></a>周期函数</h3><p>mouted(){}</p><p>vue完成模板解析并把初始的真实的dom元素放入页面后(挂载完毕)调用mounted</p><p>挂载流程：</p><p>beforeCreate(){}</p><p>在此之前，初始化生命周期、事件，数据代理没开始，所以在函数里无法通过vm访问到data中的数据，methods中 方法。</p><p>created(){}</p><ul><li><p>已经初始化数据监测（vue监测对象数组变化，给对象里的属性匹配getter，setter，以及数组方法的二次包装是在这里实现的），数据代理</p></li><li><p>可以通过vm访问到data中的数据，methods中的方法。并且如果在渲染数据的时候用到v-for渲染请求过来的数据，那请求基本是在这里进行的。</p></li><li><p>这个函数之后，vue开始解析模板，生成虚拟DOM（内存中），页面还不能显示解析好的内容</p></li></ul><p>beforeMount(){}</p><ul><li>这个阶段，页面呈现的是未经vue编译的DOM结构，所有对DOM的操作，最终都不奏效。</li></ul><p>mounted(){}</p><ul><li>之前将内存中的虚拟DOM转为真实DOM插入页面</li><li>页面呈现的是经过vue编译的DOM，一般在次进行开启定时器，发送网络请求，订阅消息，绑定自定义事件等初始化操作</li></ul><p>更新流程：</p><p>beforeUpdate(){}</p><p>数据已经更新，但页面是旧的。也就是页面尚未和数据保持同步。 </p><p>updated(){}</p><p>数据和页面保持同步</p><p><img src="https://cdn.jsdelivr.net/gh/Ggboy001/images/img/202308151950367.png" alt="image-20230526192636041"></p><p>销毁流程：</p><p>beforeDestroy(){}</p><p>一般在此阶段：关闭定时器，取消订阅消息，解绑自定义事件</p><p>destroyed(){}</p><h3 id="生命周期钩子总结"><a href="#生命周期钩子总结" class="headerlink" title="生命周期钩子总结"></a>生命周期钩子总结</h3><p><img src="https://cdn.jsdelivr.net/gh/Ggboy001/images/img/202308151950368.png" alt="image-20230526201306442"></p><p>ES6对象简写方法:就是名字和值一样,就可以把值和冒号省略.</p><p>有时候局部变量需要被外部使用，可以用this.去把这个局部变量给挂载到vue实例上</p><p>cookie:(其实本质就是类似json的字符串),存的东西就是你的身份标识,根据这个东西服务器可以返回你想要请求的</p><h2 id="vue学习4"><a href="#vue学习4" class="headerlink" title="vue学习4"></a>vue学习4</h2><p>组件是什么：实现应用中局部功能代码资源的集合</p><h3 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h3><p>非单文件组件</p><p>单文件组件(主要使用这种,条理清晰好维护)</p><p>全局注册：</p><p>Vue.component(‘hello’,hello)</p><p>局部引用：就那呗</p><p>组件使用步骤：</p><ul><li>定义组件</li><li>注册组件</li><li>使用组件</li></ul><p>为什么组件里面的data要使用函数：避免组件被复用时，数据存在引用关系</p><p>组件名称是多个单词时，可以用段横杠-连接，并且在注册组件时，要加引号包裹名称</p><h3 id="组件嵌套"><a href="#组件嵌套" class="headerlink" title="组件嵌套"></a>组件嵌套</h3><p>vm管理app组件</p><p>app负责管理下一级组件</p><p>下一级组件中又可以嵌套要用的 组件</p><p>注意：组件定义要放到前面，不能还没有遇到定义组件的代码，你就写注册或使用组件的代码（非单文件组件的，不用太在意）</p><h3 id="理解VueComponent"><a href="#理解VueComponent" class="headerlink" title="理解VueComponent"></a>理解VueComponent</h3><ul><li><p>用简写或Vue.extend()来定义的一个组件本质是一个vuecomponent的构造函数，是由Vue.extend()生成的</p><p><img src="https://cdn.jsdelivr.net/gh/Ggboy001/images/img/202308151950369.png" alt="image-20230527164741965"></p></li></ul><p>有个问题就是extendOptions和options是什么，并且是什么时候开始传入的。这个我不是很清楚，我现在的理解就是这俩就是在使用extend这个方法时传入的page</p><ul><li><p>在组件使用的步骤时，vue帮我们执行new vuecomponent（options）</p></li><li><p>每次调用vue.extend时，返回的都是一个全新的 vuecomponent构造函数</p></li><li><p>组件page中的this指向vuecomponent实例对象就是和vm结构类似的vc（vm中管理着vc）</p></li></ul><p>一个内置关系：</p><p><img src="https://cdn.jsdelivr.net/gh/Ggboy001/images/img/202308151950371.png" alt="image-20230527173822590"></p><p>vue调整了这个线路，让vue的原型对象作为vuecomponent原型对象的兜底的</p><p>为什么要有这个关系？就是为了让组件实例对象vc可以访问到vue原型上的属性，方法。</p><h2 id="vue学习5"><a href="#vue学习5" class="headerlink" title="vue学习5"></a>vue学习5</h2><h3 id="render函数"><a href="#render函数" class="headerlink" title="render函数"></a>render函数</h3><p>原因:vue.runtime…js没有模板解析器,所以不能使用template配置项,需要使用render函数接收到的createElement函数去指定具体内容.</p><p>标签template是有专门的解析器的</p><h3 id="修改默认配置-先了解"><a href="#修改默认配置-先了解" class="headerlink" title="修改默认配置(先了解)"></a>修改默认配置(先了解)</h3><p>可能会有一些特殊需求调整webpack,就需要创建vue.config.js去完成webpack的特殊配置,并且会被脚手架自动加载.</p><p>先知道一个,就是关闭脚手架的语法检查,lintOnSave:false</p><h3 id="新的学习内容"><a href="#新的学习内容" class="headerlink" title="新的学习内容"></a>新的学习内容</h3><h3 id="ref属性（组件间通信会用到）"><a href="#ref属性（组件间通信会用到）" class="headerlink" title="ref属性（组件间通信会用到）"></a>ref属性（组件间通信会用到）</h3><p>给标签绑定ref属性，可以用于获取该DOM元素</p><p>特别的：给组件加ref属性，也是可以获取该组件实例</p><p> this.$refs.××</p><h3 id="props配置"><a href="#props配置" class="headerlink" title="props配置"></a>props配置</h3><p>问题引入:结构是一样的,仅仅就是数据不一样,这个时候,难道就不能使用这个组件了吗?</p><p>传的时候,就是在组件上写上参数(名字当然要和props里面一样)</p><p>三种表示方式</p><p>props:[‘name’,’age’,’sex’] &#x2F;&#x2F;简单接收</p><p>props:</p><p>{</p><p>name:String,</p><p>age:Number</p><p>}</p><p><img src="https://cdn.jsdelivr.net/gh/Ggboy001/images/img/202308151950372.png" alt="image-20230529202757981"></p><p><img src="https://cdn.jsdelivr.net/gh/Ggboy001/images/img/202308151950373.png" alt="image-20230529203411427"></p><p>优先级是props大于data的,传过来的值优先放到组件实例vc上</p><h3 id="mixin配置-混入"><a href="#mixin配置-混入" class="headerlink" title="mixin配置(混入)"></a>mixin配置(混入)</h3><p>可以把多个组件共用的配置提取成一个混入对象(可以单独写成一个js文件,当然要暴露)</p><p>混入的语法:</p><p>局部混入   mixins:[要混入的名字]</p><p>全局混入  Vue.mixin(  )</p><p>之前看文章说这个用的多了好像很容易造成项目很混乱的结构。</p><h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><p>使用就是在Vue.use(插件名)</p><p><img src="https://cdn.jsdelivr.net/gh/Ggboy001/images/img/202308151950374.png" alt="image-20230529210814817"></p><h2 id="vue学习6"><a href="#vue学习6" class="headerlink" title="vue学习6"></a>vue学习6</h2><p>学习时长：</p><h3 id="组件自定义事件（子组件向父组件传数据）"><a href="#组件自定义事件（子组件向父组件传数据）" class="headerlink" title="组件自定义事件（子组件向父组件传数据）"></a>组件自定义事件（子组件向父组件传数据）</h3><p>是一种组件间通信的方式</p><p>引入知识点：</p><p>子给父组件传递数据：父先给子一个函数，子用props接收并将子组件值传进去</p><p>使用场景：A是父组件，B是子组件，B想给A传数据，那么就要在A中给B绑定自定义事件（事件的回调在A中）</p><p>通过父组件给子组件绑定一个自定义事件实现：子给父传递数据</p><p>需要使用$emit（’事件名’,可以传多个参数）方法去触发组件实例上你所定义的自定义事件</p><p>使用ref实现，会用到$on或$once(‘自定义事件名字’，回调函数)这个方法</p><p>注意：</p><p>就是给组件注意是组件不是标签添加click这种事件，vue也会认为这是自定义的时间名，所以也要按自定义事件去调用。除非比如用@click.native&#x3D;””</p><h3 id="自定义事件的解绑"><a href="#自定义事件的解绑" class="headerlink" title="自定义事件的解绑"></a>自定义事件的解绑</h3><p>该组件实例上的$off(‘事件名’or[]or什么也不写) </p><p><img src="https://cdn.jsdelivr.net/gh/Ggboy001/images/img/202308151950375.png" alt="image-20230530211606220"></p><h3 id="全局事件总线（很厉害的组件间通信方式）-用到特别多"><a href="#全局事件总线（很厉害的组件间通信方式）-用到特别多" class="headerlink" title="全局事件总线（很厉害的组件间通信方式）(用到特别多)"></a>全局事件总线（很厉害的组件间通信方式）(用到特别多)</h3><p>可以实现任意组件间的通信(牛啊)</p><p>嗯？现在发现还是vuex用的比较多哎。</p><p>思路:</p><ul><li><p>在Vue的构造函数上绑定一个 $bus属性(值是vm实例对象)</p></li><li><p>然后子组件就可以用这个$bus的$on和$off,并且 相互之间都可以访问到组件上定义的事件得以实现组件间通信</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Ggboy001/images/img/202308151950376.png" alt="image-20230531164217742"></p><h3 id="消息订阅与发布-还是用vue自有的全局事件总线好些"><a href="#消息订阅与发布-还是用vue自有的全局事件总线好些" class="headerlink" title="消息订阅与发布(还是用vue自有的全局事件总线好些)"></a>消息订阅与发布(还是用vue自有的全局事件总线好些)</h3><p>实现任意组件间通信</p><p>一个库:pubsub.js可以实现在任何框架里面进行消息订阅与发布</p><p>这个箭头函数在vue里面用的是淋漓尽致哈,要想this指向的实例,就用箭头函数不管是引入的库中的回调函数,还是就window管理的一些函数,还是普通的vue中的一些回调.所以要长个心眼就是有函数中用到了this,你就需要想清楚这个this指向的谁.</p><p><img src="https://cdn.jsdelivr.net/gh/Ggboy001/images/img/202308151950377.png" alt="image-20230531170333209"></p><p>用法和全局事件总线类似,图片中的细节,pubid,类似定时器取消订阅需要接收一下这个消息id,还有就是订阅消息的回调函数接收到的第一个参数是消息名</p><h3 id="nextTick"><a href="#nextTick" class="headerlink" title="nextTick"></a>nextTick</h3><p>this.$nextTick(回调函数)</p><p>使用:当改变数据后,要基于更新后的新DOM进行某些操作(获取焦点).是已经更新的DOM</p><p>vue不是你想当然的当你一改变一个数据,就重新解析模板,而是当包含这个修改数据的指令的函数执行完之后,再渲染数据.</p><p>异步定时器任务也可以不写毫秒数(当然看 需求,我这里只是解决之前的一个问题也就是通过调毫秒数以等待渲染结束,问题可能不是在于这个毫秒数),因为本身同步任务结束后才能执行异步任务,对没错和那个nextTick同理的</p><p><img src="https://cdn.jsdelivr.net/gh/Ggboy001/images/img/202308151950378.png" alt="image-20230531173805124"></p><h3 id="vue中的过度与动画（了解我觉得我暂时用不上）"><a href="#vue中的过度与动画（了解我觉得我暂时用不上）" class="headerlink" title="vue中的过度与动画（了解我觉得我暂时用不上）"></a>vue中的过度与动画（了解我觉得我暂时用不上）</h3><p><img src="https://cdn.jsdelivr.net/gh/Ggboy001/images/img/202308151950379.png" alt="image-20230531183735505"></p><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h3 id="利用脚手架解决ajax跨域问题"><a href="#利用脚手架解决ajax跨域问题" class="headerlink" title="利用脚手架解决ajax跨域问题"></a>利用脚手架解决ajax跨域问题</h3><p>1.后端人员cors配置一些响应头</p><p>2.jsonp 就是借助script src属性，还需要前后端人员双向奔赴 只能解决get跨域（丢弃了）</p><p>3.脚手架开启代理服务器（发送请求到代理服务器上，由代理服务器发送请求）</p><ul><li><p>用devServer配置，缺点只能配置一个代理服务器，2，本地如果有这个文件就获取本地静态资源</p></li><li><p>还可以用另一种devServer</p></li></ul><blockquote><p>前缀，想走代理，就可以请求的时候加个前缀，target属性是代理服务器的url（服务器不开你是无法从上面获取资源的。）</p></blockquote><h3 id="默认插槽"><a href="#默认插槽" class="headerlink" title="默认插槽"></a>默认插槽</h3><p>组件使用时里面有组件体内容，那该放到组件的什么位置呐，放到slot（标签中可以放默认值，如果没有传东西，就默认显示默认值）这个标签占用的位置</p><h3 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h3><p>slot属性，name属性</p><p>v-slot：属性仅仅用于template</p><h3 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h3><p>scope和slot-scope用于接收插槽传过来的数据</p><p>总结一下：</p><p>学习过程中敲代码敲的少了，比较多的时间花在了记笔记上</p><p>学习的周期拉的长了，导致有的自己记的知识点自己都有点不太理解，之后一个技术的学习要快一些，要不然就复习的频繁一些。</p><p>还是要以实践为主，就应该比较快速的学习完，然后做一个有关vue2的项目。</p><p>进步一点点。</p><p><img src="https://cdn.jsdelivr.net/gh/Ggboy001/images/img/202308152024173.png" alt="Vue"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vue-router</title>
      <link href="/2023/08/15/vue-router/"/>
      <url>/2023/08/15/vue-router/</url>
      
        <content type="html"><![CDATA[<p>vue-router</p><p>vue的一个插件库(想到了vuex),专门用来实现SPA</p><p>关于SPA</p><p><img src="https://cdn.jsdelivr.net/gh/Ggboy001/images/img/202308151204103.png" alt="image-20230801153443299"></p><p>router(路由器,管理多个路由)</p><p>route(路由,一组key-value,就是路径-组件)</p><h4 id="vue-router使用"><a href="#vue-router使用" class="headerlink" title="vue-router使用"></a>vue-router使用</h4><ol><li>安装</li><li>vue使用</li><li>创建router文件夹</li><li>实例化路由器并传入路由配置并暴露</li><li>引入到main中并传入router</li></ol><p>使用router-link实现路由切换</p><p>使用router-view指定展示位置</p><p>注意点：</p><p>路由组件放在pages，一般组件放在components</p><p><img src="https://cdn.jsdelivr.net/gh/Ggboy001/images/img/202308151204105.png" alt="image-20230802161746406"></p><h4 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h4><p>注意就是children配置里面的path不需要加&#x2F;，然后routerlink中需要to父级＋子级路径才能匹配到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link class=&quot;list-group-item active&quot; to=&quot;/home/mes&quot;&gt;Message&lt;/router-link&gt;</span><br></pre></td></tr></table></figure><h4 id="路由传参"><a href="#路由传参" class="headerlink" title="路由传参"></a>路由传参</h4><ol><li>query传参(路径上就是有?)</li></ol><p>携带query参数,to的两种写法:</p><ul><li>字符串</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link :to=<span class="string">&quot;`/home/message?id=$&#123;m.id&#125;&amp;title=$&#123;m.title&#125;`&quot;</span>&gt;&lt;/router-link &gt;</span><br></pre></td></tr></table></figure><ul><li>对象</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link :to=<span class="string">&quot;&#123;</span></span><br><span class="line"><span class="string">path:&#x27;/home/message/detail&#x27;</span></span><br><span class="line"><span class="string">query:&#123;</span></span><br><span class="line"><span class="string">id:m.id,</span></span><br><span class="line"><span class="string">title:m.title</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;&quot;</span>&gt;&lt;/router-link &gt;</span><br></pre></td></tr></table></figure><h4 id="命名路由"><a href="#命名路由" class="headerlink" title="命名路由"></a>命名路由</h4><p>就是路由注册的时候加一个name属性，在路径比较长的时候可以直接呼唤名字</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link :to=<span class="string">&quot;&#123;</span></span><br><span class="line"><span class="string">path:&#x27;/home/message/detail&#x27;----替换成</span></span><br><span class="line"><span class="string">name:&#x27;xiangqing&#x27;</span></span><br><span class="line"><span class="string">query:&#123;</span></span><br><span class="line"><span class="string">id:m.id,</span></span><br><span class="line"><span class="string">title:m.title</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;&quot;</span>&gt;&lt;/router-link &gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>params(路径&#x2F;)传参</li></ol><p>配置路由的path路径时:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/home/message/:id/:title&#x27;</span>(需要有占位符)</span><br></pre></td></tr></table></figure><p>注意:在对象方式传参时必须使用name去寻找路由而不是path</p><p>了解:</p><p>- 获取数据:使用 query 参数<br>- 编辑数据:使用 params 参数</p><h4 id="路由的props配置"><a href="#路由的props配置" class="headerlink" title="路由的props配置"></a>路由的props配置</h4><p>第一种写法:  true时,会把params传给该组件的所有参数以props形式传给该组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">props</span>:<span class="literal">true</span></span><br></pre></td></tr></table></figure><p>第二种写法: </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">props</span>(<span class="params">$route</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">id</span>:$route.<span class="property">query</span>.<span class="property">id</span>,</span><br><span class="line">     <span class="attr">title</span>:$route.<span class="property">params</span>.<span class="property">title</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">解构赋值更推荐这种</span><br><span class="line"><span class="title function_">props</span>(<span class="params">&#123;query:&#123;id,title&#125;&#125;</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">       id,title</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>props是用来将组件接收到的参数以props的形式给该组件(需要在组件中用props接收)</p><h4 id="router-link的replace属性"><a href="#router-link的replace属性" class="headerlink" title="router-link的replace属性"></a>router-link的replace属性</h4><p>添加这个属性后,跳转链接时把历史浏览记录的栈顶给修改成当前跳转链接</p><p>- 登录&#x2F;退出登录后跳转首页</p><h4 id="编程式路由导航"><a href="#编程式路由导航" class="headerlink" title="编程式路由导航"></a>编程式路由导航</h4><p>需求:不能用router-link了,需要点击按钮后或者页面加载完成跳转(和事件有关)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">tojioalian</span>(<span class="params">id</span>) &#123;</span><br><span class="line"> <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">                <span class="attr">path</span>: <span class="string">&#x27;/jiaolian&#x27;</span>,</span><br><span class="line">                <span class="attr">query</span>: &#123;</span><br><span class="line">                    <span class="attr">id</span>: id</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;,</span><br></pre></td></tr></table></figure><p>$router上除了push,还有replace,back,forward,go</p><h4 id=""><a href="#" class="headerlink" title=""></a><keep-alive include="组件名字"></h4><p>用于缓存不展示的路由组件,让其不被销毁</p><ul><li>缓存表单填写过的信息</li><li>缓存之前看到的位置</li></ul><p>注意这个 <code>&lt;keep-alive&gt;</code> 要求被切换到的组件都有自己的名字</p><h4 id="路由组件特有的生命周期钩子"><a href="#路由组件特有的生命周期钩子" class="headerlink" title="路由组件特有的生命周期钩子"></a>路由组件特有的生命周期钩子</h4><p>—actived（激活），deactived（失活）</p><h4 id="路由守卫"><a href="#路由守卫" class="headerlink" title="路由守卫"></a>路由守卫</h4><p>1.全局守卫</p><p>全局前置路由守卫</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to:obj,<span class="keyword">from</span>:obj,next:f</span>)=&gt;</span>&#123;</span><br><span class="line">执行路由判断逻辑根据to中的属性(name或path)  or</span><br><span class="line">用meta.<span class="property">isAuth</span>来判断(需要提前在route中配置meta对象)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>(初始化的时候、在每一次路由切换之前被调用)</p><ul><li>前置守卫主要负责对路由进行访问控制,包括鉴权(鉴定用户的可以使用的权限)、权限、频率限制等场景。</li></ul><p>​    全局后置路由守卫</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">router.<span class="title function_">afterEach</span>(<span class="function">(<span class="params">to,<span class="keyword">from</span></span>)=&gt;</span>&#123;&#125;)</span><br></pre></td></tr></table></figure><ul><li>后置路由守卫主要适合处理页面加载后需要执行的一些逻辑,如埋点、标题、鉴权、数据加载等。</li></ul><p>2.独享路由守卫</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">beforeEnter</span>(<span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>)=&gt;</span>&#123;&#125;)</span><br></pre></td></tr></table></figure><p>3.组件路由守卫</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">beforeRouteEnter</span>(<span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>)=&gt;</span>&#123;&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">beforeRouteLeave</span>(<span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>)=&gt;</span>&#123;&#125;)</span><br></pre></td></tr></table></figure><p>小认知:</p><p>脚手架打包出来的项目必须要部署才能运行</p><p>路由器的有个配置是mode(hash和history),区别就是在url上更改会不会发送网络请求去请求资源</p><p>组件库仅仅就是在用到的时候翻看文档就可以,千万别耗费时间.</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vuex基础知识</title>
      <link href="/2023/08/15/vuex%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/"/>
      <url>/2023/08/15/vuex%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="vuex"><a href="#vuex" class="headerlink" title="vuex"></a>vuex</h2><p>概念：专门在vue中实现集中式状态管理的一个vue插件，对多个组件的共享状态进行集中式管理的。</p><p>一个状态需要被共享就可以用vuex</p><p><img src="https://cdn.jsdelivr.net/gh/Ggboy001/images/img/202308151154256.png" alt="image-20230731105920141"></p><p>看这张图（一定要细致，细致之后的学习会很舒服）</p><ol><li>首先，在组件里面调用dispatch接口，传参（进行的操作，和什么数值操作）</li><li>vuex的actions里面有一个键值对，是有关这个操作的函数（函数里面需要手动调用commit接口）</li><li>在mutations里面有个键值对是用来根据要做的操作修改state中的值</li><li>最终渲染到页面</li></ol><p>actions真正的作用是如果要进行的操作需要向服务器端获取数值，就可以在这个actions中发送ajax请求获取这个数值</p><p>若知道操作和数值，可以直接在组件调用commit接口去直接到达mutations</p><p>图中没有展现的是actions，mutations，state都是需要store进行管理的，也就是调用接口需要store.dispatch</p><h4 id="vuex的初始配置"><a href="#vuex的初始配置" class="headerlink" title="vuex的初始配置"></a>vuex的初始配置</h4><ol><li>安装插件</li><li>Vue.use（只有使用了，vue传入store配置vue才认）</li><li>创建store（需要传入配置项）</li><li>vm传入store配置项</li></ol><h4 id="vuex的使用"><a href="#vuex的使用" class="headerlink" title="vuex的使用"></a>vuex的使用</h4><ul><li>把共享数据放入state中</li><li>插值语法可直接访问到$store，可以拿到state中的值</li><li>dispatch中第一个参数是进行的操作，写在组件的函数中</li><li>commit中第一个参数是大写的操作，显得牛逼，写在actions中的操作函数中</li><li>小写的操作函数中第一个参数是context，大写的操作函数第一个参数是state</li></ul><p>再度完善，写的更规范些：</p><ul><li>有业务逻辑，把业务逻辑放在actions中</li><li>无业务逻辑，且已知数值，直接在组件的方法中调用commit接口</li></ul><p>另外记一个store中的配置项，getters，和计算属性类似，也是靠return拿到值，（函数参数是state）</p><h4 id="Vuex精简代码"><a href="#Vuex精简代码" class="headerlink" title="Vuex精简代码"></a>Vuex精简代码</h4><ol><li>借助vuex中的mapState，mapGetters去映射state，getters，</li></ol><ul><li><p>传入对象（改名用这个，注意值为字符串）</p></li><li><p>传入数组（简写用这个）<img src="https://cdn.jsdelivr.net/gh/Ggboy001/images/img/202308151154258.png" alt="image-20230731220702474"></p></li></ul><ol start="2"><li>借助vuex中的mapMutations，mapActions去生成对应的方法，前者方法中会调用commit与mutations对话，后者方法中会调用dispatch与actions对话</li></ol><p>传入对象{函数名：’操作大写’}</p><p>备注：需要注意模板中绑定事件需要传入要与什么数值操作，否则就是传入event</p><h4 id="Vuex模块化-命名空间"><a href="#Vuex模块化-命名空间" class="headerlink" title="Vuex模块化+命名空间"></a>Vuex模块化+命名空间</h4><p>Q:要管理的共享数据会非常多，导致mutations等等配置特别臃肿，且不适合维护，那应该怎么办呐？</p><p>A:将这些配置按与实现什么业务相关进行分类</p><p><img src="https://cdn.jsdelivr.net/gh/Ggboy001/images/img/202308151154259.png" alt="image-20230731231001763"></p><ol><li>模块化之后怎么在组件中简写形式拿到数据呐？</li></ol><p>就需要用到namespaced配置并且在四个map…中的第一个参数指定是模块化之后的哪一个</p><p>总结：(学了将近1小时,又看视频又敲代码,就学这么点东西,就是因为创建正确的联系,如果在听的时候不那么注重细节,而把重点放在老师要讲的联系上,会不会更好)</p><ul><li>在不同的业务逻辑下将store模块化</li><li>开启namespaced并且map…中第一个参数指定是哪一个模块</li></ul><ol start="2"><li>若不采用简写形式呐?(也就是自己去从state,getters中拿值,自己调用dispatch,commit)</li></ol><p>拿state中的值时需要指定是哪一个模块</p><p>拿getters中的值时不用指定哪一个模块,用getters[countAbout&#x2F;firstname]</p><p>dispatch和commit传递第一个参数时都要用在操作名前面拼接’模块&#x2F;‘</p><p><img src="https://cdn.jsdelivr.net/gh/Ggboy001/images/img/202308151154260.png" alt="image-20230801115953040"></p><p><img src="https://cdn.jsdelivr.net/gh/Ggboy001/images/img/202308151153250.png" alt="image-20230801145617700"></p><p>vuex的规范:</p><p>src写一个store文件,里面根据业务区分出来不同的store,然后暴露出去,在index中引入并写入modules中</p><p>真的容易忘,虽然一天学完了,但是过了几天之后发现真的生疏,非常多的之前建立的联系都i想不起来了,很耗费脑子.看来还是要尽可能快的学完,然后重在做项目实践.</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>first blog记录</title>
      <link href="/2023/06/16/firstblog_createblogrecord/"/>
      <url>/2023/06/16/firstblog_createblogrecord/</url>
      
        <content type="html"><![CDATA[<h2 id="build-my-blog"><a href="#build-my-blog" class="headerlink" title="build my blog"></a>build my blog</h2><p>时间:2小时+2小时+1.5小时+4.5小时+1小时+2+3</p><h3 id="环境安装（基本都有）"><a href="#环境安装（基本都有）" class="headerlink" title="环境安装（基本都有）"></a>环境安装（基本都有）</h3><ul><li><p>node</p></li><li><p>git</p></li><li><p>typora</p></li><li><p>github账号</p><blockquote><p>创建仓库（注意命名，用户名+github.io）</p></blockquote></li><li><p>科学上网</p></li><li><p>安装Hexo(高效的静态站点生成框架,基于node.js)</p><!--hexo init出现了问题,应该是因为hexo init时文件里面不是空的.删除一下就好了--></li></ul><h3 id="连接github和本地"><a href="#连接github和本地" class="headerlink" title="连接github和本地"></a>连接github和本地</h3><ul><li>git bash中生成密钥</li><li>github上注册密钥</li><li>修改_config.yml文件(博客的配置文件,可以修改与博客相关的各种信息)（修改一下deploy部署这个page就可以实现部署到github page上，就可以实现别人访问到我的网页）</li><li>安装自动部署发布工具hexo-deployer-git</li></ul><h3 id="网址的简单美化"><a href="#网址的简单美化" class="headerlink" title="网址的简单美化"></a>网址的简单美化</h3><p>先试一下hexo的主题</p><p>但出现了一个问题：在clone主题的时候</p><p><code>Cloning into &#39;hexo-theme-matery&#39;... fatal: unable to access &#39;https://github.com/blinkfox/hexo-theme-matery.git/&#39;:iled to connect to github.com port 443: Timed out</code></p><p>方法：更改代理端口（肯定要开代理的）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.proxy http://127.0.0.1:7890</span><br></pre></td></tr></table></figure><h3 id="网页"><a href="#网页" class="headerlink" title="网页"></a>网页</h3><p>网页调整</p><ul><li><p>修改原始默认主题为hexo-theme-matery接着更改_config.yml中的相关配置</p></li><li><p>创建几个必须的页面(categories,tags,about)</p></li><li><p>配置菜单导航(基本上和配置有关的,优先考虑在_config.yml中添加)(修改配置需要注意缩进的)(配置不了,不知道什么原因)</p><blockquote><p>竟然有个默认配置可以修改提交代码到哪一个分支，main(卡这里好一会)</p></blockquote></li></ul><p>网页进一步美化</p><p>挑一挑可用的主题</p><h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><ul><li><p>域名（域名备案）</p></li><li><p>图床</p></li><li><p>服务器</p></li></ul><p> <a href="https://zblogs.top/how-to-build-a-personal-blog-site/">详细了解</a></p><p>note:又拍云cdn之后可以用于提高网站加载速度</p><h2 id="拓展了解"><a href="#拓展了解" class="headerlink" title="拓展了解"></a>拓展了解</h2><h3 id="静态博客和动态博客"><a href="#静态博客和动态博客" class="headerlink" title="静态博客和动态博客"></a>静态博客和动态博客</h3><ul><li><p>静态博客</p><blockquote><ul><li>html代码生成后,页面的内容和显示效果就基本不会变化</li><li>不会有太多用户交互(本来就是给自己写文章的,也不需要有太多交互效果)</li><li>就几个页面,要求不高,github page或低配服务器都可以</li><li>纯代码小白不推荐使用hexo+github创建,较麻烦,且耗时</li></ul></blockquote></li><li><p>动态博客</p></li></ul><blockquote><ul><li>可以随时间,数据库操作的结果的改变而变化</li><li>可以设计用户交互,着重用户体验感,这也就不是个人博客了,更偏向于用户使用的网站</li><li>服务器根据个人需求</li><li>可用wordpress等创建,简单易上手</li></ul></blockquote><p>我感觉写博客可以帮助我更好的表达自己,尤其是要站在别人的角度.自己经常性的就是仅仅让自己懂,但是别人并不理解.</p><p>输入我想输入的,输出我可以输出的.</p><p>明天: 3小时<br>更改为butterfly主题</p><p>找了一个小时10分钟，觉得还是不需要花时间去找了。嗯就这样。先用着这个基于butterfly的anzhiyu主题吧。然后再根据文档找找自己需要的功能。</p><p>美化根据文档其实就是时间问题.现在先大致这样.等之后有时间可以再更改</p><h4 id="questions："><a href="#questions：" class="headerlink" title="questions："></a>questions：</h4><ul><li><p>nav没有显示出来</p></li><li><p>文章封面设置显示不出来并且报错(要注意修改的配置在什么文件)</p></li><li><p>footer上班摸鱼去不了</p></li><li><p>线上输入域名打开排版很乱，刚开始以为是没有CDN或者github pages的问题，或者是主题配置的问题，或者是控制台报错的问题，在这卡了有两天时间，但没有浪费，（就着问题我优化了双线部署，也搭建了图床，也了解到控制台一些报错信息的原因。）。最后解决问题的方式竟然是偶尔打开一个博主的创建博客的教程，让我看到了hexo clean，尝试一下，然后就可以了。这么说，排错有时候真的很靠运气啊。</p></li></ul><blockquote><p><code>  hexo clean</code></p><p>清除缓存文件 (<code>db.json</code>) 和已生成的静态文件 (<code>public</code>)。</p><p>在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。</p></blockquote><p>之后的兴趣拓展点:(当然也要注意时间四象限)</p><ul><li>主题拓展找找自己喜欢的</li><li>图床</li><li>加速网站访问速度,cdn(Content Delivery Network,,将内容缓存在终端用户附近,加速了网站的访问——用户与内容之间的物理距离缩短，用户的等待时间也得以缩短)</li></ul><h3 id="写博客可以写的属于自己的结构"><a href="#写博客可以写的属于自己的结构" class="headerlink" title="写博客可以写的属于自己的结构"></a>写博客可以写的属于自己的结构</h3><ul><li>首先目的,知识点的用处以及为什么</li><li>其次不依附所写内容的灵感感悟</li><li>最后是拓展点</li></ul><p>Material Design</p><p>注重卡片式设计、纸张的模拟、使用了强烈对比色彩的设计风格</p><p>tips：</p><p>写代码块的语法<code>         代码</code></p><p>使用hexo s 启动本地服务后，如果修改了配置或者文章内容，需要停止服务后重新启动才能生效。这样，在调试或写文章阶段非常不方便，可以使用下面命令，以debug的方式启动，这样每次修改后就无需重启服务了。</p><blockquote><p>$ hexo s –debug（。。。不是我想要的功能，这就是博客的不严谨的地方，但应该有些用处，之后了解一下）</p></blockquote><p>重要的\觉得自己忘了有损失的知识点记录下来,其余的就忘记那也改变不了.</p><h2 id="优化blog网站"><a href="#优化blog网站" class="headerlink" title="优化blog网站"></a>优化blog网站</h2><h3 id="部署github仓库到vercel"><a href="#部署github仓库到vercel" class="headerlink" title="部署github仓库到vercel"></a>部署github仓库到vercel</h3><ul><li>首先就是github登录到vercel</li><li>然后import仓库就行</li><li>再稍微调节一下设置参数</li><li>所以我的博客现在是双线部署</li></ul><p>双线部署的优点：</p><ul><li>避免一个出现故障就访问不了</li><li>访问请求分发到不同的服务器，提高博客整体性能</li></ul><p>github pages是不支持 实时部署的，</p><p>vercel支持</p><p>问题： </p><p><code> net::ERR_BLOCKED_BY_CLIENT</code></p><p>浏览器防广告的插件的问题</p><p><img src="https://cdn.jsdelivr.net/gh/Ggboy001/images/img/image-20230619002418850.png" alt="image-20230619002418850"></p><h3 id="图床"><a href="#图床" class="headerlink" title="图床"></a>图床</h3><p>github+typora+jsdeliver实现</p><p>jsdelivr是首个打通国内与海外的免费CDN服务</p><ul><li>github创建放图片的仓库</li><li>github创建token用于picgo图床配置填写以可以向仓库写入图片</li><li>填写picgo图床配置注意按格式填写,自定义域名用到jsdelivr</li></ul><p>拓展:</p><ul><li><p>之后可以详细了解下jsdelivr还可以做什么</p></li><li><p>hexo的指令</p></li></ul>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
